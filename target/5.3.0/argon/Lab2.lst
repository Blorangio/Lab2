
/Users/admin/Documents/CTD_2023/Labs/Lab2/target/5.3.0/argon/Lab2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .module_info  00000018  000b4000  000b4000  00004000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .dynalib      00000004  000b4018  000b4018  00004018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         00001174  000b401c  000b401c  0000401c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .note.gnu.build-id 00000024  000b5190  000b5190  00005190  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .data         0000006c  2003e63c  000b51b4  0000e63c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .bss          00000148  2003e6a8  2003e6a8  0001e6a8  2**2
                  ALLOC
  6 .backup       00000004  2003f400  000b5220  0000f400  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .module_info_product 00000006  000b5224  000b5224  00015224  2**0
                  ALLOC
  8 .module_info_suffix 00000024  000b522a  000b522a  0001522a  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  9 .module_info_crc 00000004  000b524e  000b524e  0001524e  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
 10 .debug_info   000f2ed5  00000000  00000000  00015252  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 0000f467  00000000  00000000  00108127  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_loc    00032b14  00000000  00000000  0011758e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_aranges 00002660  00000000  00000000  0014a0a2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_ranges 00009828  00000000  00000000  0014c702  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_macro  000335d9  00000000  00000000  00155f2a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_line   00033dbb  00000000  00000000  00189503  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    00135302  00000000  00000000  001bd2be  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_frame  00006a8c  00000000  00000000  002f25c0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

000b401c <strlen>:
   b401c:	4603      	mov	r3, r0
   b401e:	f813 2b01 	ldrb.w	r2, [r3], #1
   b4022:	2a00      	cmp	r2, #0
   b4024:	d1fb      	bne.n	b401e <strlen+0x2>
   b4026:	1a18      	subs	r0, r3, r0
   b4028:	3801      	subs	r0, #1
   b402a:	4770      	bx	lr

000b402c <module_user_pre_init>:
/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   b402c:	4809      	ldr	r0, [pc, #36]	; (b4054 <module_user_pre_init+0x28>)
   b402e:	490a      	ldr	r1, [pc, #40]	; (b4058 <module_user_pre_init+0x2c>)
   b4030:	4288      	cmp	r0, r1
void* module_user_pre_init() {
   b4032:	b508      	push	{r3, lr}
    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   b4034:	d005      	beq.n	b4042 <module_user_pre_init+0x16>
   b4036:	4a09      	ldr	r2, [pc, #36]	; (b405c <module_user_pre_init+0x30>)
   b4038:	4282      	cmp	r2, r0
   b403a:	d002      	beq.n	b4042 <module_user_pre_init+0x16>
    {
        memcpy(&link_global_data_start, &link_global_data_initial_values, link_global_data_size);
   b403c:	1a12      	subs	r2, r2, r0
   b403e:	f000 feef 	bl	b4e20 <memcpy>
    }

    memset(&link_bss_location, 0, link_bss_size );
   b4042:	4807      	ldr	r0, [pc, #28]	; (b4060 <module_user_pre_init+0x34>)
   b4044:	4a07      	ldr	r2, [pc, #28]	; (b4064 <module_user_pre_init+0x38>)
   b4046:	2100      	movs	r1, #0
   b4048:	1a12      	subs	r2, r2, r0
   b404a:	f000 fef7 	bl	b4e3c <memset>
    return &link_global_data_start;
}
   b404e:	4801      	ldr	r0, [pc, #4]	; (b4054 <module_user_pre_init+0x28>)
   b4050:	bd08      	pop	{r3, pc}
   b4052:	bf00      	nop
   b4054:	2003e63c 	.word	0x2003e63c
   b4058:	000b51b4 	.word	0x000b51b4
   b405c:	2003e6a8 	.word	0x2003e6a8
   b4060:	2003e6a8 	.word	0x2003e6a8
   b4064:	2003e7f0 	.word	0x2003e7f0

000b4068 <module_user_init>:
extern constructor_ptr_t link_constructors_location[];
extern constructor_ptr_t link_constructors_end;
#define link_constructors_size   ((unsigned long)&link_constructors_end  -  (unsigned long)&link_constructors_location )

void module_user_init()
{
   b4068:	b570      	push	{r4, r5, r6, lr}
    module_user_init_hook();

    // invoke constructors
    for (size_t ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   b406a:	4e07      	ldr	r6, [pc, #28]	; (b4088 <module_user_init+0x20>)
   b406c:	4c07      	ldr	r4, [pc, #28]	; (b408c <module_user_init+0x24>)
    module_user_init_hook();
   b406e:	f000 fdc9 	bl	b4c04 <module_user_init_hook>
    for (size_t ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   b4072:	1ba4      	subs	r4, r4, r6
   b4074:	08a4      	lsrs	r4, r4, #2
   b4076:	2500      	movs	r5, #0
   b4078:	42ac      	cmp	r4, r5
   b407a:	d100      	bne.n	b407e <module_user_init+0x16>
    {
        link_constructors_location[ctor_num]();
    }
}
   b407c:	bd70      	pop	{r4, r5, r6, pc}
        link_constructors_location[ctor_num]();
   b407e:	f856 3b04 	ldr.w	r3, [r6], #4
   b4082:	4798      	blx	r3
    for (size_t ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   b4084:	3501      	adds	r5, #1
   b4086:	e7f7      	b.n	b4078 <module_user_init+0x10>
   b4088:	000b516c 	.word	0x000b516c
   b408c:	000b5190 	.word	0x000b5190

000b4090 <module_user_setup>:

/**
 * Export these functions with a fuller name so they don't clash with the setup/loop wrappers in the system module.
 */
void module_user_setup() {
    setup();
   b4090:	f000 b813 	b.w	b40ba <setup>

000b4094 <module_user_loop>:
}

void module_user_loop() {
   b4094:	b508      	push	{r3, lr}
    loop();
   b4096:	f000 f819 	bl	b40cc <loop>
    _post_loop();
}
   b409a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    _post_loop();
   b409e:	f000 bd69 	b.w	b4b74 <_post_loop>

000b40a2 <_Znaj>:
   b40a2:	f000 b9cd 	b.w	b4440 <malloc>

000b40a6 <_ZdlPvj>:
	free(p);
}

void operator delete(void *p, size_t size)
{
	free(p);
   b40a6:	f000 b9d3 	b.w	b4450 <free>

000b40aa <__cxa_guard_acquire>:

/* Provide default implemenation for __cxa_guard_acquire() and
 * __cxa_guard_release(). Note: these must be revisited if a multitasking
 * OS is ported to this platform. */
__extension__ typedef int __guard __attribute__((mode (__DI__)));
int __cxa_guard_acquire(__guard *g) {return !*(char *)(g);};
   b40aa:	7800      	ldrb	r0, [r0, #0]
   b40ac:	fab0 f080 	clz	r0, r0
   b40b0:	0940      	lsrs	r0, r0, #5
   b40b2:	4770      	bx	lr

000b40b4 <__cxa_guard_release>:
void __cxa_guard_release (__guard *g) {*(char *)g = 1;};
   b40b4:	2301      	movs	r3, #1
   b40b6:	7003      	strb	r3, [r0, #0]
   b40b8:	4770      	bx	lr

000b40ba <setup>:
SYSTEM_MODE(MANUAL);
SYSTEM_THREAD(ENABLED);
uint16_t value = analogRead(A5);
void setup() {
   b40ba:	b508      	push	{r3, lr}
  Serial.begin(9600);
   b40bc:	f000 fcd4 	bl	b4a68 <_Z16_fetch_usbserialv>
}
   b40c0:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  Serial.begin(9600);
   b40c4:	f44f 5116 	mov.w	r1, #9600	; 0x2580
   b40c8:	f000 bcc2 	b.w	b4a50 <_ZN9USBSerial5beginEl>

000b40cc <loop>:
void loop() {
   b40cc:	b538      	push	{r3, r4, r5, lr}
  value = analogRead(A5);
   b40ce:	200e      	movs	r0, #14
   b40d0:	f000 fe08 	bl	b4ce4 <analogRead>
   b40d4:	4d06      	ldr	r5, [pc, #24]	; (b40f0 <loop+0x24>)
   b40d6:	8028      	strh	r0, [r5, #0]
  Serial.println(value);
   b40d8:	f000 fcc6 	bl	b4a68 <_Z16_fetch_usbserialv>
            val = n;
        }
#if __GNUC__ >= 9
#pragma GCC diagnostic pop
#endif // __GNUC__ >= 9
        return printNumber(val, base) + t;
   b40dc:	8829      	ldrh	r1, [r5, #0]
   b40de:	4604      	mov	r4, r0
   b40e0:	220a      	movs	r2, #10
   b40e2:	f000 fbc6 	bl	b4872 <_ZN5Print11printNumberEmh>
        n += println();
   b40e6:	4620      	mov	r0, r4
   b40e8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   b40ec:	f000 bbb5 	b.w	b485a <_ZN5Print7printlnEv>
   b40f0:	2003e6b4 	.word	0x2003e6b4

000b40f4 <_GLOBAL__sub_I_SystemMode>:

class SystemSleepResult {
public:
    SystemSleepResult()
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE) {
   b40f4:	4b09      	ldr	r3, [pc, #36]	; (b411c <_GLOBAL__sub_I_SystemMode+0x28>)
    SleepResult() {}
   b40f6:	4a0a      	ldr	r2, [pc, #40]	; (b4120 <_GLOBAL__sub_I_SystemMode+0x2c>)
   b40f8:	b510      	push	{r4, lr}
              error_(SYSTEM_ERROR_NONE) {
   b40fa:	2400      	movs	r4, #0
   b40fc:	e9c3 4400 	strd	r4, r4, [r3]
    SleepResult() {}
   b4100:	609a      	str	r2, [r3, #8]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
   b4102:	2003      	movs	r0, #3
   b4104:	f000 f910 	bl	b4328 <set_system_mode>
SYSTEM_THREAD(ENABLED);
   b4108:	4621      	mov	r1, r4
   b410a:	2001      	movs	r0, #1
   b410c:	f000 f914 	bl	b4338 <system_thread_set_state>
uint16_t value = analogRead(A5);
   b4110:	200e      	movs	r0, #14
   b4112:	f000 fde7 	bl	b4ce4 <analogRead>
   b4116:	4b03      	ldr	r3, [pc, #12]	; (b4124 <_GLOBAL__sub_I_SystemMode+0x30>)
   b4118:	8018      	strh	r0, [r3, #0]
   b411a:	bd10      	pop	{r4, pc}
   b411c:	2003e6a8 	.word	0x2003e6a8
   b4120:	ffff0000 	.word	0xffff0000
   b4124:	2003e6b4 	.word	0x2003e6b4

000b4128 <os_mutex_recursive_create>:
DYNALIB_FN(13, hal_concurrent, os_mutex_destroy, int(os_mutex_t))
DYNALIB_FN(14, hal_concurrent, os_mutex_lock, int(os_mutex_t))
DYNALIB_FN(15, hal_concurrent, os_mutex_trylock, int(os_mutex_t))
DYNALIB_FN(16, hal_concurrent, os_mutex_unlock, int(os_mutex_t))

DYNALIB_FN(17, hal_concurrent, os_mutex_recursive_create, int(os_mutex_recursive_t*))
   b4128:	b508      	push	{r3, lr}
   b412a:	4b02      	ldr	r3, [pc, #8]	; (b4134 <os_mutex_recursive_create+0xc>)
   b412c:	681b      	ldr	r3, [r3, #0]
   b412e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   b4130:	9301      	str	r3, [sp, #4]
   b4132:	bd08      	pop	{r3, pc}
   b4134:	00030248 	.word	0x00030248

000b4138 <HAL_RNG_GetRandomNumber>:

DYNALIB_BEGIN(hal)

#if PLATFORM_ID > PLATFORM_GCC
DYNALIB_FN(0, hal, HAL_RNG_Configuration, void(void))
DYNALIB_FN(1, hal, HAL_RNG_GetRandomNumber, uint32_t(void))
   b4138:	b508      	push	{r3, lr}
   b413a:	4b02      	ldr	r3, [pc, #8]	; (b4144 <HAL_RNG_GetRandomNumber+0xc>)
   b413c:	681b      	ldr	r3, [r3, #0]
   b413e:	685b      	ldr	r3, [r3, #4]
   b4140:	9301      	str	r3, [sp, #4]
   b4142:	bd08      	pop	{r3, pc}
   b4144:	00030218 	.word	0x00030218

000b4148 <HAL_Timer_Get_Milli_Seconds>:
#endif // PLATFORM_ID > PLATFORM_GCC

DYNALIB_FN(BASE_IDX + 0, hal, HAL_Delay_Milliseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 1, hal, HAL_Delay_Microseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal, HAL_Timer_Get_Micro_Seconds, system_tick_t(void))
DYNALIB_FN(BASE_IDX + 3, hal, HAL_Timer_Get_Milli_Seconds, system_tick_t(void))
   b4148:	b508      	push	{r3, lr}
   b414a:	4b02      	ldr	r3, [pc, #8]	; (b4154 <HAL_Timer_Get_Milli_Seconds+0xc>)
   b414c:	681b      	ldr	r3, [r3, #0]
   b414e:	695b      	ldr	r3, [r3, #20]
   b4150:	9301      	str	r3, [sp, #4]
   b4152:	bd08      	pop	{r3, pc}
   b4154:	00030218 	.word	0x00030218

000b4158 <hal_pin_validate_function>:
// GNINRAW

DYNALIB_BEGIN(hal_gpio)

DYNALIB_FN(0, hal_gpio, hal_pin_map, hal_pin_info_t*(void))
DYNALIB_FN(1, hal_gpio, hal_pin_validate_function, PinFunction(hal_pin_t, PinFunction))
   b4158:	b508      	push	{r3, lr}
   b415a:	4b02      	ldr	r3, [pc, #8]	; (b4164 <hal_pin_validate_function+0xc>)
   b415c:	681b      	ldr	r3, [r3, #0]
   b415e:	685b      	ldr	r3, [r3, #4]
   b4160:	9301      	str	r3, [sp, #4]
   b4162:	bd08      	pop	{r3, pc}
   b4164:	0003022c 	.word	0x0003022c

000b4168 <hal_adc_read>:
DYNALIB_FN(8, hal_gpio, hal_interrupt_enable_all, void(void))
DYNALIB_FN(9, hal_gpio, hal_interrupt_disable_all, void(void))

DYNALIB_FN(10, hal_gpio, HAL_DAC_Write, void(hal_pin_t, uint16_t))
DYNALIB_FN(11, hal_gpio, hal_adc_set_sample_time, void(uint8_t))
DYNALIB_FN(12, hal_gpio, hal_adc_read, int32_t(uint16_t))
   b4168:	b508      	push	{r3, lr}
   b416a:	4b02      	ldr	r3, [pc, #8]	; (b4174 <hal_adc_read+0xc>)
   b416c:	681b      	ldr	r3, [r3, #0]
   b416e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   b4170:	9301      	str	r3, [sp, #4]
   b4172:	bd08      	pop	{r3, pc}
   b4174:	0003022c 	.word	0x0003022c

000b4178 <hal_i2c_write>:
DYNALIB_FN(3, hal_i2c, hal_i2c_begin, void(hal_i2c_interface_t, hal_i2c_mode_t, uint8_t, void*))
DYNALIB_FN(4, hal_i2c, hal_i2c_end, void(hal_i2c_interface_t, void*))
DYNALIB_FN(5, hal_i2c, hal_i2c_request, uint32_t(hal_i2c_interface_t, uint8_t, uint8_t, uint8_t, void*))
DYNALIB_FN(6, hal_i2c, hal_i2c_begin_transmission, void(hal_i2c_interface_t, uint8_t, const hal_i2c_transmission_config_t*))
DYNALIB_FN(7, hal_i2c, hal_i2c_end_transmission, uint8_t(hal_i2c_interface_t, uint8_t, void*))
DYNALIB_FN(8, hal_i2c, hal_i2c_write, uint32_t(hal_i2c_interface_t, uint8_t, void*))
   b4178:	b508      	push	{r3, lr}
   b417a:	4b02      	ldr	r3, [pc, #8]	; (b4184 <hal_i2c_write+0xc>)
   b417c:	681b      	ldr	r3, [r3, #0]
   b417e:	6a1b      	ldr	r3, [r3, #32]
   b4180:	9301      	str	r3, [sp, #4]
   b4182:	bd08      	pop	{r3, pc}
   b4184:	00030228 	.word	0x00030228

000b4188 <hal_i2c_available>:
DYNALIB_FN(9, hal_i2c, hal_i2c_available, int32_t(hal_i2c_interface_t, void*))
   b4188:	b508      	push	{r3, lr}
   b418a:	4b02      	ldr	r3, [pc, #8]	; (b4194 <hal_i2c_available+0xc>)
   b418c:	681b      	ldr	r3, [r3, #0]
   b418e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   b4190:	9301      	str	r3, [sp, #4]
   b4192:	bd08      	pop	{r3, pc}
   b4194:	00030228 	.word	0x00030228

000b4198 <hal_i2c_read>:
DYNALIB_FN(10, hal_i2c, hal_i2c_read, int32_t(hal_i2c_interface_t, void*))
   b4198:	b508      	push	{r3, lr}
   b419a:	4b02      	ldr	r3, [pc, #8]	; (b41a4 <hal_i2c_read+0xc>)
   b419c:	681b      	ldr	r3, [r3, #0]
   b419e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   b41a0:	9301      	str	r3, [sp, #4]
   b41a2:	bd08      	pop	{r3, pc}
   b41a4:	00030228 	.word	0x00030228

000b41a8 <hal_i2c_peek>:
DYNALIB_FN(11, hal_i2c, hal_i2c_peek, int32_t(hal_i2c_interface_t, void*))
   b41a8:	b508      	push	{r3, lr}
   b41aa:	4b02      	ldr	r3, [pc, #8]	; (b41b4 <hal_i2c_peek+0xc>)
   b41ac:	681b      	ldr	r3, [r3, #0]
   b41ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b41b0:	9301      	str	r3, [sp, #4]
   b41b2:	bd08      	pop	{r3, pc}
   b41b4:	00030228 	.word	0x00030228

000b41b8 <hal_i2c_flush>:
DYNALIB_FN(12, hal_i2c, hal_i2c_flush, void(hal_i2c_interface_t, void*))
   b41b8:	b508      	push	{r3, lr}
   b41ba:	4b02      	ldr	r3, [pc, #8]	; (b41c4 <hal_i2c_flush+0xc>)
   b41bc:	681b      	ldr	r3, [r3, #0]
   b41be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   b41c0:	9301      	str	r3, [sp, #4]
   b41c2:	bd08      	pop	{r3, pc}
   b41c4:	00030228 	.word	0x00030228

000b41c8 <hal_i2c_is_enabled>:
DYNALIB_FN(13, hal_i2c, hal_i2c_is_enabled, bool(hal_i2c_interface_t, void*))
   b41c8:	b508      	push	{r3, lr}
   b41ca:	4b02      	ldr	r3, [pc, #8]	; (b41d4 <hal_i2c_is_enabled+0xc>)
   b41cc:	681b      	ldr	r3, [r3, #0]
   b41ce:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   b41d0:	9301      	str	r3, [sp, #4]
   b41d2:	bd08      	pop	{r3, pc}
   b41d4:	00030228 	.word	0x00030228

000b41d8 <hal_i2c_init>:
DYNALIB_FN(14, hal_i2c, hal_i2c_set_callback_on_received, void(hal_i2c_interface_t, void(*)(int), void*))
DYNALIB_FN(15, hal_i2c, hal_i2c_set_callback_on_requested, void(hal_i2c_interface_t, void(*)(void), void*))
DYNALIB_FN(16, hal_i2c, hal_i2c_init, int(hal_i2c_interface_t, const hal_i2c_config_t*))
   b41d8:	b508      	push	{r3, lr}
   b41da:	4b02      	ldr	r3, [pc, #8]	; (b41e4 <hal_i2c_init+0xc>)
   b41dc:	681b      	ldr	r3, [r3, #0]
   b41de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b41e0:	9301      	str	r3, [sp, #4]
   b41e2:	bd08      	pop	{r3, pc}
   b41e4:	00030228 	.word	0x00030228

000b41e8 <inet_inet_ntop>:
DYNALIB_FN(0, hal_inet, inet_inet_addr, in_addr_t(const char*))
DYNALIB_FN(1, hal_inet, inet_inet_aton, int(const char*, struct in_addr*))
DYNALIB_FN(2, hal_inet, inet_inet_network, in_addr_t(const char*))
DYNALIB_FN(3, hal_inet, inet_inet_ntoa, char*(struct in_addr))
DYNALIB_FN(4, hal_inet, inet_inet_ntoa_r, char*(struct in_addr, char*, socklen_t))
DYNALIB_FN(5, hal_inet, inet_inet_ntop, const char*(int, const void*, char*, socklen_t))
   b41e8:	b508      	push	{r3, lr}
   b41ea:	4b02      	ldr	r3, [pc, #8]	; (b41f4 <inet_inet_ntop+0xc>)
   b41ec:	681b      	ldr	r3, [r3, #0]
   b41ee:	695b      	ldr	r3, [r3, #20]
   b41f0:	9301      	str	r3, [sp, #4]
   b41f2:	bd08      	pop	{r3, pc}
   b41f4:	00030264 	.word	0x00030264

000b41f8 <netdb_freeaddrinfo>:

DYNALIB_BEGIN(hal_netdb)

DYNALIB_FN(0, hal_netdb, netdb_gethostbyname, struct hostent*(const char*))
DYNALIB_FN(1, hal_netdb, netdb_gethostbyname_r, int(const char*, struct hostent*, char*, size_t, struct hostent**, int*))
DYNALIB_FN(2, hal_netdb, netdb_freeaddrinfo, void(struct addrinfo*))
   b41f8:	b508      	push	{r3, lr}
   b41fa:	4b02      	ldr	r3, [pc, #8]	; (b4204 <netdb_freeaddrinfo+0xc>)
   b41fc:	681b      	ldr	r3, [r3, #0]
   b41fe:	689b      	ldr	r3, [r3, #8]
   b4200:	9301      	str	r3, [sp, #4]
   b4202:	bd08      	pop	{r3, pc}
   b4204:	00030268 	.word	0x00030268

000b4208 <netdb_getaddrinfo>:
DYNALIB_FN(3, hal_netdb, netdb_getaddrinfo, int(const char*, const char*, const struct addrinfo*, struct addrinfo**))
   b4208:	b508      	push	{r3, lr}
   b420a:	4b02      	ldr	r3, [pc, #8]	; (b4214 <netdb_getaddrinfo+0xc>)
   b420c:	681b      	ldr	r3, [r3, #0]
   b420e:	68db      	ldr	r3, [r3, #12]
   b4210:	9301      	str	r3, [sp, #4]
   b4212:	bd08      	pop	{r3, pc}
   b4214:	00030268 	.word	0x00030268

000b4218 <hal_spi_init>:
DYNALIB_FN(2, hal_spi, hal_spi_set_bit_order, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(3, hal_spi, hal_spi_set_data_mode, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(4, hal_spi, hal_spi_set_clock_divider, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(5, hal_spi, hal_spi_transfer, uint16_t(hal_spi_interface_t, uint16_t))
DYNALIB_FN(6, hal_spi, hal_spi_is_enabled_deprecated, bool(void))
DYNALIB_FN(7, hal_spi, hal_spi_init, void(hal_spi_interface_t))
   b4218:	b508      	push	{r3, lr}
   b421a:	4b02      	ldr	r3, [pc, #8]	; (b4224 <hal_spi_init+0xc>)
   b421c:	681b      	ldr	r3, [r3, #0]
   b421e:	69db      	ldr	r3, [r3, #28]
   b4220:	9301      	str	r3, [sp, #4]
   b4222:	bd08      	pop	{r3, pc}
   b4224:	00030230 	.word	0x00030230

000b4228 <hal_spi_is_enabled>:
DYNALIB_FN(8, hal_spi, hal_spi_is_enabled, bool(hal_spi_interface_t))
   b4228:	b508      	push	{r3, lr}
   b422a:	4b02      	ldr	r3, [pc, #8]	; (b4234 <hal_spi_is_enabled+0xc>)
   b422c:	681b      	ldr	r3, [r3, #0]
   b422e:	6a1b      	ldr	r3, [r3, #32]
   b4230:	9301      	str	r3, [sp, #4]
   b4232:	bd08      	pop	{r3, pc}
   b4234:	00030230 	.word	0x00030230

000b4238 <hal_usart_write>:
#endif

DYNALIB_FN(BASE_IDX + 0, hal_usart, hal_usart_init, void(hal_usart_interface_t, hal_usart_ring_buffer_t*, hal_usart_ring_buffer_t*))
DYNALIB_FN(BASE_IDX + 1, hal_usart, hal_usart_begin, void(hal_usart_interface_t, uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal_usart, hal_usart_end, void(hal_usart_interface_t))
DYNALIB_FN(BASE_IDX + 3, hal_usart, hal_usart_write, uint32_t(hal_usart_interface_t, uint8_t))
   b4238:	b508      	push	{r3, lr}
   b423a:	4b02      	ldr	r3, [pc, #8]	; (b4244 <hal_usart_write+0xc>)
   b423c:	681b      	ldr	r3, [r3, #0]
   b423e:	68db      	ldr	r3, [r3, #12]
   b4240:	9301      	str	r3, [sp, #4]
   b4242:	bd08      	pop	{r3, pc}
   b4244:	0003023c 	.word	0x0003023c

000b4248 <hal_usart_available>:
DYNALIB_FN(BASE_IDX + 4, hal_usart, hal_usart_available, int32_t(hal_usart_interface_t))
   b4248:	b508      	push	{r3, lr}
   b424a:	4b02      	ldr	r3, [pc, #8]	; (b4254 <hal_usart_available+0xc>)
   b424c:	681b      	ldr	r3, [r3, #0]
   b424e:	691b      	ldr	r3, [r3, #16]
   b4250:	9301      	str	r3, [sp, #4]
   b4252:	bd08      	pop	{r3, pc}
   b4254:	0003023c 	.word	0x0003023c

000b4258 <hal_usart_read>:
DYNALIB_FN(BASE_IDX + 5, hal_usart, hal_usart_read, int32_t(hal_usart_interface_t))
   b4258:	b508      	push	{r3, lr}
   b425a:	4b02      	ldr	r3, [pc, #8]	; (b4264 <hal_usart_read+0xc>)
   b425c:	681b      	ldr	r3, [r3, #0]
   b425e:	695b      	ldr	r3, [r3, #20]
   b4260:	9301      	str	r3, [sp, #4]
   b4262:	bd08      	pop	{r3, pc}
   b4264:	0003023c 	.word	0x0003023c

000b4268 <hal_usart_peek>:
DYNALIB_FN(BASE_IDX + 6, hal_usart, hal_usart_peek, int32_t(hal_usart_interface_t))
   b4268:	b508      	push	{r3, lr}
   b426a:	4b02      	ldr	r3, [pc, #8]	; (b4274 <hal_usart_peek+0xc>)
   b426c:	681b      	ldr	r3, [r3, #0]
   b426e:	699b      	ldr	r3, [r3, #24]
   b4270:	9301      	str	r3, [sp, #4]
   b4272:	bd08      	pop	{r3, pc}
   b4274:	0003023c 	.word	0x0003023c

000b4278 <hal_usart_flush>:
DYNALIB_FN(BASE_IDX + 7, hal_usart, hal_usart_flush, void(hal_usart_interface_t))
   b4278:	b508      	push	{r3, lr}
   b427a:	4b02      	ldr	r3, [pc, #8]	; (b4284 <hal_usart_flush+0xc>)
   b427c:	681b      	ldr	r3, [r3, #0]
   b427e:	69db      	ldr	r3, [r3, #28]
   b4280:	9301      	str	r3, [sp, #4]
   b4282:	bd08      	pop	{r3, pc}
   b4284:	0003023c 	.word	0x0003023c

000b4288 <hal_usart_is_enabled>:
DYNALIB_FN(BASE_IDX + 8, hal_usart, hal_usart_is_enabled, bool(hal_usart_interface_t))
   b4288:	b508      	push	{r3, lr}
   b428a:	4b02      	ldr	r3, [pc, #8]	; (b4294 <hal_usart_is_enabled+0xc>)
   b428c:	681b      	ldr	r3, [r3, #0]
   b428e:	6a1b      	ldr	r3, [r3, #32]
   b4290:	9301      	str	r3, [sp, #4]
   b4292:	bd08      	pop	{r3, pc}
   b4294:	0003023c 	.word	0x0003023c

000b4298 <hal_usart_available_data_for_write>:
DYNALIB_FN(BASE_IDX + 9, hal_usart, hal_usart_half_duplex, void(hal_usart_interface_t, bool))
DYNALIB_FN(BASE_IDX + 10, hal_usart, hal_usart_available_data_for_write, int32_t(hal_usart_interface_t))
   b4298:	b508      	push	{r3, lr}
   b429a:	4b02      	ldr	r3, [pc, #8]	; (b42a4 <hal_usart_available_data_for_write+0xc>)
   b429c:	681b      	ldr	r3, [r3, #0]
   b429e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   b42a0:	9301      	str	r3, [sp, #4]
   b42a2:	bd08      	pop	{r3, pc}
   b42a4:	0003023c 	.word	0x0003023c

000b42a8 <hal_usart_init_ex>:
DYNALIB_FN(BASE_IDX2 + 0, hal_usart, hal_usart_begin_config, void(hal_usart_interface_t serial, uint32_t baud, uint32_t config, void *ptr))
DYNALIB_FN(BASE_IDX2 + 1, hal_usart, hal_usart_write_nine_bits, uint32_t(hal_usart_interface_t serial, uint16_t data))
DYNALIB_FN(BASE_IDX2 + 2, hal_usart, hal_usart_send_break, void(hal_usart_interface_t, void*))
DYNALIB_FN(BASE_IDX2 + 3, hal_usart, hal_usart_break_detected, uint8_t(hal_usart_interface_t))
DYNALIB_FN(BASE_IDX2 + 4, hal_usart, hal_usart_sleep, int(hal_usart_interface_t serial, bool, void*))
DYNALIB_FN(BASE_IDX2 + 5, hal_usart, hal_usart_init_ex, int(hal_usart_interface_t, const hal_usart_buffer_config_t*, void*))
   b42a8:	b508      	push	{r3, lr}
   b42aa:	4b02      	ldr	r3, [pc, #8]	; (b42b4 <hal_usart_init_ex+0xc>)
   b42ac:	681b      	ldr	r3, [r3, #0]
   b42ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b42b0:	9301      	str	r3, [sp, #4]
   b42b2:	bd08      	pop	{r3, pc}
   b42b4:	0003023c 	.word	0x0003023c

000b42b8 <HAL_USB_USART_Init>:
// GNINRAW

DYNALIB_BEGIN(hal_usb)

#ifdef USB_CDC_ENABLE
DYNALIB_FN(0, hal_usb, HAL_USB_USART_Init, void(HAL_USB_USART_Serial, const HAL_USB_USART_Config*))
   b42b8:	b508      	push	{r3, lr}
   b42ba:	4b02      	ldr	r3, [pc, #8]	; (b42c4 <HAL_USB_USART_Init+0xc>)
   b42bc:	681b      	ldr	r3, [r3, #0]
   b42be:	681b      	ldr	r3, [r3, #0]
   b42c0:	9301      	str	r3, [sp, #4]
   b42c2:	bd08      	pop	{r3, pc}
   b42c4:	0003024c 	.word	0x0003024c

000b42c8 <HAL_USB_USART_Begin>:
DYNALIB_FN(1, hal_usb, HAL_USB_USART_Begin, void(HAL_USB_USART_Serial, uint32_t, void *))
   b42c8:	b508      	push	{r3, lr}
   b42ca:	4b02      	ldr	r3, [pc, #8]	; (b42d4 <HAL_USB_USART_Begin+0xc>)
   b42cc:	681b      	ldr	r3, [r3, #0]
   b42ce:	685b      	ldr	r3, [r3, #4]
   b42d0:	9301      	str	r3, [sp, #4]
   b42d2:	bd08      	pop	{r3, pc}
   b42d4:	0003024c 	.word	0x0003024c

000b42d8 <HAL_USB_USART_Available_Data>:
DYNALIB_FN(2, hal_usb, HAL_USB_USART_End, void(HAL_USB_USART_Serial))
DYNALIB_FN(3, hal_usb, HAL_USB_USART_Baud_Rate, unsigned int(HAL_USB_USART_Serial))
DYNALIB_FN(4, hal_usb, HAL_USB_USART_Available_Data, int32_t(HAL_USB_USART_Serial))
   b42d8:	b508      	push	{r3, lr}
   b42da:	4b02      	ldr	r3, [pc, #8]	; (b42e4 <HAL_USB_USART_Available_Data+0xc>)
   b42dc:	681b      	ldr	r3, [r3, #0]
   b42de:	691b      	ldr	r3, [r3, #16]
   b42e0:	9301      	str	r3, [sp, #4]
   b42e2:	bd08      	pop	{r3, pc}
   b42e4:	0003024c 	.word	0x0003024c

000b42e8 <HAL_USB_USART_Available_Data_For_Write>:
DYNALIB_FN(5, hal_usb, HAL_USB_USART_Available_Data_For_Write, int32_t(HAL_USB_USART_Serial))
   b42e8:	b508      	push	{r3, lr}
   b42ea:	4b02      	ldr	r3, [pc, #8]	; (b42f4 <HAL_USB_USART_Available_Data_For_Write+0xc>)
   b42ec:	681b      	ldr	r3, [r3, #0]
   b42ee:	695b      	ldr	r3, [r3, #20]
   b42f0:	9301      	str	r3, [sp, #4]
   b42f2:	bd08      	pop	{r3, pc}
   b42f4:	0003024c 	.word	0x0003024c

000b42f8 <HAL_USB_USART_Receive_Data>:
DYNALIB_FN(6, hal_usb, HAL_USB_USART_Receive_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   b42f8:	b508      	push	{r3, lr}
   b42fa:	4b02      	ldr	r3, [pc, #8]	; (b4304 <HAL_USB_USART_Receive_Data+0xc>)
   b42fc:	681b      	ldr	r3, [r3, #0]
   b42fe:	699b      	ldr	r3, [r3, #24]
   b4300:	9301      	str	r3, [sp, #4]
   b4302:	bd08      	pop	{r3, pc}
   b4304:	0003024c 	.word	0x0003024c

000b4308 <HAL_USB_USART_Send_Data>:
DYNALIB_FN(7, hal_usb, HAL_USB_USART_Send_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   b4308:	b508      	push	{r3, lr}
   b430a:	4b02      	ldr	r3, [pc, #8]	; (b4314 <HAL_USB_USART_Send_Data+0xc>)
   b430c:	681b      	ldr	r3, [r3, #0]
   b430e:	69db      	ldr	r3, [r3, #28]
   b4310:	9301      	str	r3, [sp, #4]
   b4312:	bd08      	pop	{r3, pc}
   b4314:	0003024c 	.word	0x0003024c

000b4318 <HAL_USB_USART_Flush_Data>:
DYNALIB_FN(8, hal_usb, HAL_USB_USART_Flush_Data, void(HAL_USB_USART_Serial))
   b4318:	b508      	push	{r3, lr}
   b431a:	4b02      	ldr	r3, [pc, #8]	; (b4324 <HAL_USB_USART_Flush_Data+0xc>)
   b431c:	681b      	ldr	r3, [r3, #0]
   b431e:	6a1b      	ldr	r3, [r3, #32]
   b4320:	9301      	str	r3, [sp, #4]
   b4322:	bd08      	pop	{r3, pc}
   b4324:	0003024c 	.word	0x0003024c

000b4328 <set_system_mode>:
#endif

DYNALIB_BEGIN(system)

DYNALIB_FN(0, system, system_mode, System_Mode_TypeDef(void))
DYNALIB_FN(1, system, set_system_mode, void(System_Mode_TypeDef))
   b4328:	b508      	push	{r3, lr}
   b432a:	4b02      	ldr	r3, [pc, #8]	; (b4334 <set_system_mode+0xc>)
   b432c:	681b      	ldr	r3, [r3, #0]
   b432e:	685b      	ldr	r3, [r3, #4]
   b4330:	9301      	str	r3, [sp, #4]
   b4332:	bd08      	pop	{r3, pc}
   b4334:	00030220 	.word	0x00030220

000b4338 <system_thread_set_state>:
DYNALIB_FN(6, system, system_sleep, int(Spark_Sleep_TypeDef, long, uint32_t, void*))
DYNALIB_FN(7, system, system_sleep_pin, int(uint16_t, uint16_t, long, uint32_t, void*))
DYNALIB_FN(8, system, system_subscribe_event, int(system_event_t, system_event_handler_t*, SystemEventContext*))
DYNALIB_FN(9, system, system_unsubscribe_event, void(system_event_t, system_event_handler_t*, const SystemEventContext*))
DYNALIB_FN(10, system, system_button_pushed_duration, uint16_t(uint8_t, void*))
DYNALIB_FN(11, system, system_thread_set_state, void(spark::feature::State, void*))
   b4338:	b508      	push	{r3, lr}
   b433a:	4b02      	ldr	r3, [pc, #8]	; (b4344 <system_thread_set_state+0xc>)
   b433c:	681b      	ldr	r3, [r3, #0]
   b433e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b4340:	9301      	str	r3, [sp, #4]
   b4342:	bd08      	pop	{r3, pc}
   b4344:	00030220 	.word	0x00030220

000b4348 <system_ctrl_set_app_request_handler>:
DYNALIB_FN(BASE_IDX + 6, system, led_pattern_period, uint16_t(int, int, void*))
DYNALIB_FN(BASE_IDX + 7, system, system_set_tester_handlers, int(system_tester_handlers_t*, void*))
DYNALIB_FN(BASE_IDX + 8, system, system_format_diag_data, int(const uint16_t*, size_t, unsigned, appender_fn, void*, void*))

// Control requests
DYNALIB_FN(BASE_IDX + 9, system, system_ctrl_set_app_request_handler, int(ctrl_request_handler_fn, void*))
   b4348:	b508      	push	{r3, lr}
   b434a:	4b03      	ldr	r3, [pc, #12]	; (b4358 <system_ctrl_set_app_request_handler+0x10>)
   b434c:	681b      	ldr	r3, [r3, #0]
   b434e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
   b4352:	9301      	str	r3, [sp, #4]
   b4354:	bd08      	pop	{r3, pc}
   b4356:	0000      	.short	0x0000
   b4358:	00030220 	.word	0x00030220

000b435c <system_ctrl_set_result>:
DYNALIB_FN(BASE_IDX + 10, system, system_ctrl_alloc_reply_data, int(ctrl_request*, size_t, void*))
DYNALIB_FN(BASE_IDX + 11, system, system_ctrl_free_request_data, void(ctrl_request*, void*))
DYNALIB_FN(BASE_IDX + 12, system, system_ctrl_set_result, void(ctrl_request*, int, ctrl_completion_handler_fn, void*, void*))
   b435c:	b508      	push	{r3, lr}
   b435e:	4b03      	ldr	r3, [pc, #12]	; (b436c <system_ctrl_set_result+0x10>)
   b4360:	681b      	ldr	r3, [r3, #0]
   b4362:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
   b4366:	9301      	str	r3, [sp, #4]
   b4368:	bd08      	pop	{r3, pc}
   b436a:	0000      	.short	0x0000
   b436c:	00030220 	.word	0x00030220

000b4370 <spark_set_random_seed_from_cloud_handler>:
DYNALIB_FN(10, system_cloud, spark_unsubscribe, void(void*))
DYNALIB_FN(11, system_cloud, spark_sync_time, bool(void*))
DYNALIB_FN(12, system_cloud, spark_sync_time_pending, bool(void*))
DYNALIB_FN(13, system_cloud, spark_sync_time_last, system_tick_t(time32_t*, time_t*))
DYNALIB_FN(14, system_cloud, spark_set_connection_property, int(unsigned, unsigned, const void*, void*))
DYNALIB_FN(15, system_cloud, spark_set_random_seed_from_cloud_handler, int(void (*handler)(unsigned int), void*))
   b4370:	b508      	push	{r3, lr}
   b4372:	4b02      	ldr	r3, [pc, #8]	; (b437c <spark_set_random_seed_from_cloud_handler+0xc>)
   b4374:	681b      	ldr	r3, [r3, #0]
   b4376:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   b4378:	9301      	str	r3, [sp, #4]
   b437a:	bd08      	pop	{r3, pc}
   b437c:	00030244 	.word	0x00030244

000b4380 <network_connect>:
#endif

DYNALIB_BEGIN(system_net)

DYNALIB_FN(0, system_net, network_config, const void*(network_handle_t, uint32_t, void*))
DYNALIB_FN(1, system_net, network_connect, void(network_handle_t, uint32_t, uint32_t, void*))
   b4380:	b508      	push	{r3, lr}
   b4382:	4b02      	ldr	r3, [pc, #8]	; (b438c <network_connect+0xc>)
   b4384:	681b      	ldr	r3, [r3, #0]
   b4386:	685b      	ldr	r3, [r3, #4]
   b4388:	9301      	str	r3, [sp, #4]
   b438a:	bd08      	pop	{r3, pc}
   b438c:	00030240 	.word	0x00030240

000b4390 <network_connecting>:
DYNALIB_FN(2, system_net, network_connecting, bool(network_handle_t, uint32_t, void*))
   b4390:	b508      	push	{r3, lr}
   b4392:	4b02      	ldr	r3, [pc, #8]	; (b439c <network_connecting+0xc>)
   b4394:	681b      	ldr	r3, [r3, #0]
   b4396:	689b      	ldr	r3, [r3, #8]
   b4398:	9301      	str	r3, [sp, #4]
   b439a:	bd08      	pop	{r3, pc}
   b439c:	00030240 	.word	0x00030240

000b43a0 <network_disconnect>:
DYNALIB_FN(3, system_net, network_disconnect, void(network_handle_t, uint32_t, void*))
   b43a0:	b508      	push	{r3, lr}
   b43a2:	4b02      	ldr	r3, [pc, #8]	; (b43ac <network_disconnect+0xc>)
   b43a4:	681b      	ldr	r3, [r3, #0]
   b43a6:	68db      	ldr	r3, [r3, #12]
   b43a8:	9301      	str	r3, [sp, #4]
   b43aa:	bd08      	pop	{r3, pc}
   b43ac:	00030240 	.word	0x00030240

000b43b0 <network_ready>:
DYNALIB_FN(4, system_net, network_ready, bool(network_handle_t, uint32_t, void*))
   b43b0:	b508      	push	{r3, lr}
   b43b2:	4b02      	ldr	r3, [pc, #8]	; (b43bc <network_ready+0xc>)
   b43b4:	681b      	ldr	r3, [r3, #0]
   b43b6:	691b      	ldr	r3, [r3, #16]
   b43b8:	9301      	str	r3, [sp, #4]
   b43ba:	bd08      	pop	{r3, pc}
   b43bc:	00030240 	.word	0x00030240

000b43c0 <network_on>:
DYNALIB_FN(5, system_net, network_on, void(network_handle_t, uint32_t, uint32_t, void*))
   b43c0:	b508      	push	{r3, lr}
   b43c2:	4b02      	ldr	r3, [pc, #8]	; (b43cc <network_on+0xc>)
   b43c4:	681b      	ldr	r3, [r3, #0]
   b43c6:	695b      	ldr	r3, [r3, #20]
   b43c8:	9301      	str	r3, [sp, #4]
   b43ca:	bd08      	pop	{r3, pc}
   b43cc:	00030240 	.word	0x00030240

000b43d0 <network_off>:
DYNALIB_FN(6, system_net, network_off, void(network_handle_t, uint32_t, uint32_t, void*))
   b43d0:	b508      	push	{r3, lr}
   b43d2:	4b02      	ldr	r3, [pc, #8]	; (b43dc <network_off+0xc>)
   b43d4:	681b      	ldr	r3, [r3, #0]
   b43d6:	699b      	ldr	r3, [r3, #24]
   b43d8:	9301      	str	r3, [sp, #4]
   b43da:	bd08      	pop	{r3, pc}
   b43dc:	00030240 	.word	0x00030240

000b43e0 <network_listen>:
DYNALIB_FN(7, system_net, network_listen, void(network_handle_t, uint32_t, void*))
   b43e0:	b508      	push	{r3, lr}
   b43e2:	4b02      	ldr	r3, [pc, #8]	; (b43ec <network_listen+0xc>)
   b43e4:	681b      	ldr	r3, [r3, #0]
   b43e6:	69db      	ldr	r3, [r3, #28]
   b43e8:	9301      	str	r3, [sp, #4]
   b43ea:	bd08      	pop	{r3, pc}
   b43ec:	00030240 	.word	0x00030240

000b43f0 <network_listening>:
DYNALIB_FN(8, system_net, network_listening, bool(network_handle_t, uint32_t, void*))
   b43f0:	b508      	push	{r3, lr}
   b43f2:	4b02      	ldr	r3, [pc, #8]	; (b43fc <network_listening+0xc>)
   b43f4:	681b      	ldr	r3, [r3, #0]
   b43f6:	6a1b      	ldr	r3, [r3, #32]
   b43f8:	9301      	str	r3, [sp, #4]
   b43fa:	bd08      	pop	{r3, pc}
   b43fc:	00030240 	.word	0x00030240

000b4400 <network_set_listen_timeout>:
DYNALIB_FN(9, system_net, network_has_credentials, bool(network_handle_t, uint32_t, void*))
DYNALIB_FN(10, system_net, network_set_credentials, int(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(11, system_net, network_clear_credentials, bool(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(12, system_net, network_set_listen_timeout, void(network_handle_t, uint16_t, void*))
   b4400:	b508      	push	{r3, lr}
   b4402:	4b02      	ldr	r3, [pc, #8]	; (b440c <network_set_listen_timeout+0xc>)
   b4404:	681b      	ldr	r3, [r3, #0]
   b4406:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   b4408:	9301      	str	r3, [sp, #4]
   b440a:	bd08      	pop	{r3, pc}
   b440c:	00030240 	.word	0x00030240

000b4410 <network_get_listen_timeout>:
DYNALIB_FN(13, system_net, network_get_listen_timeout, uint16_t(network_handle_t, uint32_t, void*))
   b4410:	b508      	push	{r3, lr}
   b4412:	4b02      	ldr	r3, [pc, #8]	; (b441c <network_get_listen_timeout+0xc>)
   b4414:	681b      	ldr	r3, [r3, #0]
   b4416:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   b4418:	9301      	str	r3, [sp, #4]
   b441a:	bd08      	pop	{r3, pc}
   b441c:	00030240 	.word	0x00030240

000b4420 <network_is_on>:
DYNALIB_FN(14, system_net, network_set_hostname, int(network_handle_t, uint32_t, const char*, void*))
DYNALIB_FN(15, system_net, network_get_hostname, int(network_handle_t, uint32_t, char*, size_t, void*))
DYNALIB_FN(16, system_net, network_is_on, bool(network_handle_t, void*))
   b4420:	b508      	push	{r3, lr}
   b4422:	4b02      	ldr	r3, [pc, #8]	; (b442c <network_is_on+0xc>)
   b4424:	681b      	ldr	r3, [r3, #0]
   b4426:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b4428:	9301      	str	r3, [sp, #4]
   b442a:	bd08      	pop	{r3, pc}
   b442c:	00030240 	.word	0x00030240

000b4430 <network_is_off>:
DYNALIB_FN(17, system_net, network_is_off, bool(network_handle_t, void*))
   b4430:	b508      	push	{r3, lr}
   b4432:	4b02      	ldr	r3, [pc, #8]	; (b443c <network_is_off+0xc>)
   b4434:	681b      	ldr	r3, [r3, #0]
   b4436:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   b4438:	9301      	str	r3, [sp, #4]
   b443a:	bd08      	pop	{r3, pc}
   b443c:	00030240 	.word	0x00030240

000b4440 <malloc>:
#include "hal_platform.h"
#endif // defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))

DYNALIB_BEGIN(rt)

DYNALIB_FN(0, rt, malloc, void*(size_t))
   b4440:	b508      	push	{r3, lr}
   b4442:	4b02      	ldr	r3, [pc, #8]	; (b444c <malloc+0xc>)
   b4444:	681b      	ldr	r3, [r3, #0]
   b4446:	681b      	ldr	r3, [r3, #0]
   b4448:	9301      	str	r3, [sp, #4]
   b444a:	bd08      	pop	{r3, pc}
   b444c:	0003021c 	.word	0x0003021c

000b4450 <free>:
DYNALIB_FN(1, rt, free, void(void*))
   b4450:	b508      	push	{r3, lr}
   b4452:	4b02      	ldr	r3, [pc, #8]	; (b445c <free+0xc>)
   b4454:	681b      	ldr	r3, [r3, #0]
   b4456:	685b      	ldr	r3, [r3, #4]
   b4458:	9301      	str	r3, [sp, #4]
   b445a:	bd08      	pop	{r3, pc}
   b445c:	0003021c 	.word	0x0003021c

000b4460 <__assert_func>:
DYNALIB_FN(13, rt, _free_r, void(struct _reent*, void*))
DYNALIB_FN(14, rt, _realloc_r, void*(struct _reent*, void*, size_t))
DYNALIB_FN(15, rt, __errno, int*())

#if defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))
DYNALIB_FN(16, rt, __assert_func, void(const char*, int, const char*, const char*))
   b4460:	b508      	push	{r3, lr}
   b4462:	4b02      	ldr	r3, [pc, #8]	; (b446c <__assert_func+0xc>)
   b4464:	681b      	ldr	r3, [r3, #0]
   b4466:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b4468:	9301      	str	r3, [sp, #4]
   b446a:	bd08      	pop	{r3, pc}
   b446c:	0003021c 	.word	0x0003021c

000b4470 <newlib_impure_ptr_callback>:
DYNALIB_FN(17, rt, newlib_impure_ptr_callback, void(void (*)(struct _reent*, size_t, uint32_t, void*), void*))
   b4470:	b508      	push	{r3, lr}
   b4472:	4b02      	ldr	r3, [pc, #8]	; (b447c <newlib_impure_ptr_callback+0xc>)
   b4474:	681b      	ldr	r3, [r3, #0]
   b4476:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   b4478:	9301      	str	r3, [sp, #4]
   b447a:	bd08      	pop	{r3, pc}
   b447c:	0003021c 	.word	0x0003021c

000b4480 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E>:
    /**
     * Creates a shared mutex.
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
   b4480:	4802      	ldr	r0, [pc, #8]	; (b448c <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0xc>)
   b4482:	2300      	movs	r3, #0
   b4484:	6003      	str	r3, [r0, #0]
    {
        os_mutex_recursive_create(&handle_);
   b4486:	f7ff be4f 	b.w	b4128 <os_mutex_recursive_create>
   b448a:	bf00      	nop
   b448c:	2003e6b8 	.word	0x2003e6b8

000b4490 <_ZN5spark13EthernetClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   b4490:	2200      	movs	r2, #0
   b4492:	6840      	ldr	r0, [r0, #4]
   b4494:	4611      	mov	r1, r2
   b4496:	f7ff bfab 	b.w	b43f0 <network_listening>

000b449a <_ZN5spark13EthernetClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
   b449a:	2200      	movs	r2, #0
   b449c:	6840      	ldr	r0, [r0, #4]
   b449e:	4611      	mov	r1, r2
   b44a0:	f7ff bfb6 	b.w	b4410 <network_get_listen_timeout>

000b44a4 <_ZN5spark13EthernetClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
   b44a4:	6840      	ldr	r0, [r0, #4]
   b44a6:	2200      	movs	r2, #0
   b44a8:	f7ff bfaa 	b.w	b4400 <network_set_listen_timeout>

000b44ac <_ZN5spark13EthernetClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
   b44ac:	6840      	ldr	r0, [r0, #4]
   b44ae:	2200      	movs	r2, #0
   b44b0:	f081 0101 	eor.w	r1, r1, #1
   b44b4:	f7ff bf94 	b.w	b43e0 <network_listen>

000b44b8 <_ZN5spark13EthernetClass3offEv>:
        network_off(*this, 0, 0, NULL);
   b44b8:	2300      	movs	r3, #0
   b44ba:	6840      	ldr	r0, [r0, #4]
   b44bc:	461a      	mov	r2, r3
   b44be:	4619      	mov	r1, r3
   b44c0:	f7ff bf86 	b.w	b43d0 <network_off>

000b44c4 <_ZN5spark13EthernetClass2onEv>:
        network_on(*this, 0, 0, NULL);
   b44c4:	2300      	movs	r3, #0
   b44c6:	6840      	ldr	r0, [r0, #4]
   b44c8:	461a      	mov	r2, r3
   b44ca:	4619      	mov	r1, r3
   b44cc:	f7ff bf78 	b.w	b43c0 <network_on>

000b44d0 <_ZN5spark13EthernetClass5readyEv>:
    }

    bool ready() {
        return network_ready(*this, 0,  NULL);
   b44d0:	2200      	movs	r2, #0
   b44d2:	6840      	ldr	r0, [r0, #4]
   b44d4:	4611      	mov	r1, r2
   b44d6:	f7ff bf6b 	b.w	b43b0 <network_ready>

000b44da <_ZN5spark13EthernetClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
   b44da:	2200      	movs	r2, #0
   b44dc:	6840      	ldr	r0, [r0, #4]
   b44de:	4611      	mov	r1, r2
   b44e0:	f7ff bf56 	b.w	b4390 <network_connecting>

000b44e4 <_ZN5spark13EthernetClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   b44e4:	6840      	ldr	r0, [r0, #4]
   b44e6:	2200      	movs	r2, #0
   b44e8:	2102      	movs	r1, #2
   b44ea:	f7ff bf59 	b.w	b43a0 <network_disconnect>

000b44ee <_ZN5spark13EthernetClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
   b44ee:	2300      	movs	r3, #0
   b44f0:	6840      	ldr	r0, [r0, #4]
   b44f2:	461a      	mov	r2, r3
   b44f4:	f7ff bf44 	b.w	b4380 <network_connect>

000b44f8 <_GLOBAL__sub_I__ZN5spark8EthernetE>:
    static NetworkClass& from(network_interface_t nif);

    virtual IPAddress resolve(const char* name);

    explicit NetworkClass(network_interface_t iface)
            : iface_(iface) {
   b44f8:	4b02      	ldr	r3, [pc, #8]	; (b4504 <_GLOBAL__sub_I__ZN5spark8EthernetE+0xc>)
   b44fa:	2203      	movs	r2, #3
   b44fc:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_ETHERNET) {
   b44fe:	4a02      	ldr	r2, [pc, #8]	; (b4508 <_GLOBAL__sub_I__ZN5spark8EthernetE+0x10>)
   b4500:	601a      	str	r2, [r3, #0]

namespace spark {

EthernetClass Ethernet;

} // spark
   b4502:	4770      	bx	lr
   b4504:	2003e6bc 	.word	0x2003e6bc
   b4508:	000b4f90 	.word	0x000b4f90

000b450c <_ZN7TwoWireD1Ev>:
private:
  hal_i2c_interface_t _i2c;

public:
  TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& config);
  virtual ~TwoWire() {};
   b450c:	4770      	bx	lr

000b450e <_ZN7TwoWire5writeEPKhj>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
   b450e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b4510:	4606      	mov	r6, r0
   b4512:	4615      	mov	r5, r2
   b4514:	460c      	mov	r4, r1
   b4516:	188f      	adds	r7, r1, r2
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
   b4518:	42bc      	cmp	r4, r7
   b451a:	d006      	beq.n	b452a <_ZN7TwoWire5writeEPKhj+0x1c>
  {
    write(data[i]);
   b451c:	6833      	ldr	r3, [r6, #0]
   b451e:	f814 1b01 	ldrb.w	r1, [r4], #1
   b4522:	689b      	ldr	r3, [r3, #8]
   b4524:	4630      	mov	r0, r6
   b4526:	4798      	blx	r3
  for(size_t i = 0; i < quantity; ++i)
   b4528:	e7f6      	b.n	b4518 <_ZN7TwoWire5writeEPKhj+0xa>
  }

  return quantity;
}
   b452a:	4628      	mov	r0, r5
   b452c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b452e <_ZN7TwoWire5writeEh>:
  return hal_i2c_write(_i2c, data, NULL);
   b452e:	7c00      	ldrb	r0, [r0, #16]
   b4530:	2200      	movs	r2, #0
   b4532:	f7ff be21 	b.w	b4178 <hal_i2c_write>

000b4536 <_ZN7TwoWire9availableEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
{
  return hal_i2c_available(_i2c, NULL);
   b4536:	7c00      	ldrb	r0, [r0, #16]
   b4538:	2100      	movs	r1, #0
   b453a:	f7ff be25 	b.w	b4188 <hal_i2c_available>

000b453e <_ZN7TwoWire4readEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::read(void)
{
  return hal_i2c_read(_i2c, NULL);
   b453e:	7c00      	ldrb	r0, [r0, #16]
   b4540:	2100      	movs	r1, #0
   b4542:	f7ff be29 	b.w	b4198 <hal_i2c_read>

000b4546 <_ZN7TwoWire4peekEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
  return hal_i2c_peek(_i2c, NULL);
   b4546:	7c00      	ldrb	r0, [r0, #16]
   b4548:	2100      	movs	r1, #0
   b454a:	f7ff be2d 	b.w	b41a8 <hal_i2c_peek>

000b454e <_ZN7TwoWire5flushEv>:
}

void TwoWire::flush(void)
{
  hal_i2c_flush(_i2c, NULL);
   b454e:	7c00      	ldrb	r0, [r0, #16]
   b4550:	2100      	movs	r1, #0
   b4552:	f7ff be31 	b.w	b41b8 <hal_i2c_flush>

000b4556 <_ZN7TwoWireD0Ev>:
   b4556:	b510      	push	{r4, lr}
   b4558:	2114      	movs	r1, #20
   b455a:	4604      	mov	r4, r0
   b455c:	f7ff fda3 	bl	b40a6 <_ZdlPvj>
   b4560:	4620      	mov	r0, r4
   b4562:	bd10      	pop	{r4, pc}

000b4564 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>:
TwoWire::TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& conf)
   b4564:	b538      	push	{r3, r4, r5, lr}
   b4566:	4604      	mov	r4, r0
   b4568:	4615      	mov	r5, r2
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
   b456a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   b456e:	2200      	movs	r2, #0
   b4570:	e9c4 2301 	strd	r2, r3, [r4, #4]
   b4574:	4b09      	ldr	r3, [pc, #36]	; (b459c <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t+0x38>)
  _i2c = i2c;
   b4576:	7421      	strb	r1, [r4, #16]
TwoWire::TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& conf)
   b4578:	4608      	mov	r0, r1
   b457a:	6023      	str	r3, [r4, #0]
  int result = hal_i2c_init(_i2c, &conf);
   b457c:	4629      	mov	r1, r5
   b457e:	f7ff fe2b 	bl	b41d8 <hal_i2c_init>
  if (result == SYSTEM_ERROR_NOT_ENOUGH_DATA && 
   b4582:	30bf      	adds	r0, #191	; 0xbf
   b4584:	d108      	bne.n	b4598 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t+0x34>
      (conf.flags & HAL_I2C_CONFIG_FLAG_FREEABLE)) {
   b4586:	696b      	ldr	r3, [r5, #20]
  if (result == SYSTEM_ERROR_NOT_ENOUGH_DATA && 
   b4588:	07db      	lsls	r3, r3, #31
   b458a:	d505      	bpl.n	b4598 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t+0x34>
    free(conf.rx_buffer);
   b458c:	6868      	ldr	r0, [r5, #4]
   b458e:	f7ff ff5f 	bl	b4450 <free>
    free(conf.tx_buffer);
   b4592:	68e8      	ldr	r0, [r5, #12]
   b4594:	f7ff ff5c 	bl	b4450 <free>
}
   b4598:	4620      	mov	r0, r4
   b459a:	bd38      	pop	{r3, r4, r5, pc}
   b459c:	000b4fcc 	.word	0x000b4fcc

000b45a0 <_ZN9IPAddressD1Ev>:
    IPAddress(uint32_t address);
    // 4 bytes defining the IP address in network order
    IPAddress(const uint8_t* address);
    IPAddress(const HAL_IPAddress& address);

    virtual ~IPAddress() {}
   b45a0:	4770      	bx	lr

000b45a2 <_ZN9IPAddressD0Ev>:
   b45a2:	b510      	push	{r4, lr}
   b45a4:	2118      	movs	r1, #24
   b45a6:	4604      	mov	r4, r0
   b45a8:	f7ff fd7d 	bl	b40a6 <_ZdlPvj>
   b45ac:	4620      	mov	r0, r4
   b45ae:	bd10      	pop	{r4, pc}

000b45b0 <_ZNK9IPAddress7printToER5Print>:
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
   b45b0:	b5f0      	push	{r4, r5, r6, r7, lr}
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
   b45b2:	7d03      	ldrb	r3, [r0, #20]
   b45b4:	2b06      	cmp	r3, #6
{
   b45b6:	b08d      	sub	sp, #52	; 0x34
   b45b8:	460e      	mov	r6, r1
		char buf[INET6_ADDRSTRLEN+1];
		buf[0] = 0;
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   b45ba:	f100 0704 	add.w	r7, r0, #4
   b45be:	f04f 0400 	mov.w	r4, #0
	if (address.v==6) {
   b45c2:	d012      	beq.n	b45ea <_ZNK9IPAddress7printToER5Print+0x3a>
   b45c4:	f100 0508 	add.w	r5, r0, #8
            val = n;
        }
#if __GNUC__ >= 9
#pragma GCC diagnostic pop
#endif // __GNUC__ >= 9
        return printNumber(val, base) + t;
   b45c8:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
   b45cc:	220a      	movs	r2, #10
   b45ce:	4630      	mov	r0, r6
   b45d0:	f000 f94f 	bl	b4872 <_ZN5Print11printNumberEmh>
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
   b45d4:	42af      	cmp	r7, r5
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
   b45d6:	4404      	add	r4, r0
    for (int i = 0; i < 4; i++)
   b45d8:	d019      	beq.n	b460e <_ZNK9IPAddress7printToER5Print+0x5e>
        if (n)
   b45da:	2c00      	cmp	r4, #0
   b45dc:	d0f4      	beq.n	b45c8 <_ZNK9IPAddress7printToER5Print+0x18>
            n += p.print('.');
   b45de:	212e      	movs	r1, #46	; 0x2e
   b45e0:	4630      	mov	r0, r6
   b45e2:	f000 f937 	bl	b4854 <_ZN5Print5printEc>
   b45e6:	4404      	add	r4, r0
   b45e8:	e7ee      	b.n	b45c8 <_ZNK9IPAddress7printToER5Print+0x18>
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   b45ea:	232f      	movs	r3, #47	; 0x2f
   b45ec:	466a      	mov	r2, sp
   b45ee:	4639      	mov	r1, r7
   b45f0:	200a      	movs	r0, #10
		buf[0] = 0;
   b45f2:	f88d 4000 	strb.w	r4, [sp]
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   b45f6:	f7ff fdf7 	bl	b41e8 <inet_inet_ntop>
      return write((const uint8_t *)str, strlen(str));
   b45fa:	4668      	mov	r0, sp
   b45fc:	f7ff fd0e 	bl	b401c <strlen>
   b4600:	6833      	ldr	r3, [r6, #0]
   b4602:	4602      	mov	r2, r0
   b4604:	68db      	ldr	r3, [r3, #12]
   b4606:	4669      	mov	r1, sp
   b4608:	4630      	mov	r0, r6
   b460a:	4798      	blx	r3
   b460c:	4604      	mov	r4, r0
    }
    return n;
}
   b460e:	4620      	mov	r0, r4
   b4610:	b00d      	add	sp, #52	; 0x34
   b4612:	bdf0      	pop	{r4, r5, r6, r7, pc}

000b4614 <_ZN9IPAddressC1Ev>:
IPAddress::IPAddress()
   b4614:	b510      	push	{r4, lr}
   b4616:	4b05      	ldr	r3, [pc, #20]	; (b462c <_ZN9IPAddressC1Ev+0x18>)
   b4618:	4604      	mov	r4, r0
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
   b461a:	2211      	movs	r2, #17
   b461c:	f840 3b04 	str.w	r3, [r0], #4
   b4620:	2100      	movs	r1, #0
   b4622:	f000 fc0b 	bl	b4e3c <memset>
}
   b4626:	4620      	mov	r0, r4
   b4628:	bd10      	pop	{r4, pc}
   b462a:	bf00      	nop
   b462c:	000b4ff4 	.word	0x000b4ff4

000b4630 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>:
IPAddress::IPAddress(const HAL_IPAddress& address)
   b4630:	4603      	mov	r3, r0
   b4632:	4a07      	ldr	r2, [pc, #28]	; (b4650 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0x20>)
   b4634:	b510      	push	{r4, lr}
   b4636:	f843 2b04 	str.w	r2, [r3], #4
    memcpy(&this->address, &address, sizeof(address));
   b463a:	f101 0210 	add.w	r2, r1, #16
   b463e:	f851 4b04 	ldr.w	r4, [r1], #4
   b4642:	f843 4b04 	str.w	r4, [r3], #4
   b4646:	4291      	cmp	r1, r2
   b4648:	d1f9      	bne.n	b463e <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0xe>
   b464a:	780a      	ldrb	r2, [r1, #0]
   b464c:	701a      	strb	r2, [r3, #0]
}
   b464e:	bd10      	pop	{r4, pc}
   b4650:	000b4ff4 	.word	0x000b4ff4

000b4654 <_ZN9IPAddress8set_ipv4Ehhhh>:
{
   b4654:	b510      	push	{r4, lr}
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
   b4656:	f89d 4008 	ldrb.w	r4, [sp, #8]
   b465a:	ea44 2303 	orr.w	r3, r4, r3, lsl #8
   b465e:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
   b4662:	ea42 6101 	orr.w	r1, r2, r1, lsl #24
        address.v = version;
   b4666:	2304      	movs	r3, #4
   b4668:	6041      	str	r1, [r0, #4]
   b466a:	7503      	strb	r3, [r0, #20]
}
   b466c:	bd10      	pop	{r4, pc}
	...

000b4670 <_ZN9IPAddressC1EPKh>:
IPAddress::IPAddress(const uint8_t* addr)
   b4670:	b507      	push	{r0, r1, r2, lr}
   b4672:	4b06      	ldr	r3, [pc, #24]	; (b468c <_ZN9IPAddressC1EPKh+0x1c>)
   b4674:	6003      	str	r3, [r0, #0]
    set_ipv4(addr[0], addr[1], addr[2], addr[3]);
   b4676:	78cb      	ldrb	r3, [r1, #3]
   b4678:	9300      	str	r3, [sp, #0]
   b467a:	788b      	ldrb	r3, [r1, #2]
   b467c:	784a      	ldrb	r2, [r1, #1]
   b467e:	7809      	ldrb	r1, [r1, #0]
   b4680:	f7ff ffe8 	bl	b4654 <_ZN9IPAddress8set_ipv4Ehhhh>
}
   b4684:	b003      	add	sp, #12
   b4686:	f85d fb04 	ldr.w	pc, [sp], #4
   b468a:	bf00      	nop
   b468c:	000b4ff4 	.word	0x000b4ff4

000b4690 <_GLOBAL__sub_I__ZN5spark3LogE>:
    // This handler doesn't support direct logging
}

// spark::Logger
inline spark::Logger::Logger(const char *name) :
        name_(name) {
   b4690:	4b01      	ldr	r3, [pc, #4]	; (b4698 <_GLOBAL__sub_I__ZN5spark3LogE+0x8>)
   b4692:	4a02      	ldr	r2, [pc, #8]	; (b469c <_GLOBAL__sub_I__ZN5spark3LogE+0xc>)
   b4694:	601a      	str	r2, [r3, #0]
#if Wiring_LogConfig

// spark::
void spark::logProcessControlRequest(ctrl_request* req) {
    JSONRequestHandler::process(req);
}
   b4696:	4770      	bx	lr
   b4698:	2003e6c4 	.word	0x2003e6c4
   b469c:	000b5000 	.word	0x000b5000

000b46a0 <_ZN5spark12NetworkClass7connectEj>:
        return Network;
    }
}

void NetworkClass::connect(unsigned flags) {
    network_connect(*this, flags, 0, nullptr);
   b46a0:	2300      	movs	r3, #0
   b46a2:	6840      	ldr	r0, [r0, #4]
   b46a4:	461a      	mov	r2, r3
   b46a6:	f7ff be6b 	b.w	b4380 <network_connect>

000b46aa <_ZN5spark12NetworkClass10disconnectEv>:
}

void NetworkClass::disconnect() {
    network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, nullptr);
   b46aa:	6840      	ldr	r0, [r0, #4]
   b46ac:	2200      	movs	r2, #0
   b46ae:	2102      	movs	r1, #2
   b46b0:	f7ff be76 	b.w	b43a0 <network_disconnect>

000b46b4 <_ZN5spark12NetworkClass10connectingEv>:
}

bool NetworkClass::connecting() {
    return network_connecting(*this, 0, nullptr);
   b46b4:	2200      	movs	r2, #0
   b46b6:	6840      	ldr	r0, [r0, #4]
   b46b8:	4611      	mov	r1, r2
   b46ba:	f7ff be69 	b.w	b4390 <network_connecting>

000b46be <_ZN5spark12NetworkClass5readyEv>:
}

bool NetworkClass::ready() {
    return network_ready(*this, 0, nullptr);
   b46be:	2200      	movs	r2, #0
   b46c0:	6840      	ldr	r0, [r0, #4]
   b46c2:	4611      	mov	r1, r2
   b46c4:	f7ff be74 	b.w	b43b0 <network_ready>

000b46c8 <_ZN5spark12NetworkClass2onEv>:
}

void NetworkClass::on() {
    network_on(*this, 0, 0, nullptr);
   b46c8:	2300      	movs	r3, #0
   b46ca:	6840      	ldr	r0, [r0, #4]
   b46cc:	461a      	mov	r2, r3
   b46ce:	4619      	mov	r1, r3
   b46d0:	f7ff be76 	b.w	b43c0 <network_on>

000b46d4 <_ZN5spark12NetworkClass3offEv>:
}

void NetworkClass::off() {
    network_off(*this, 0, 0, nullptr);
   b46d4:	2300      	movs	r3, #0
   b46d6:	6840      	ldr	r0, [r0, #4]
   b46d8:	461a      	mov	r2, r3
   b46da:	4619      	mov	r1, r3
   b46dc:	f7ff be78 	b.w	b43d0 <network_off>

000b46e0 <_ZN5spark12NetworkClass4isOnEv>:
}

bool NetworkClass::isOn() {
    return network_is_on(*this, nullptr);
   b46e0:	6840      	ldr	r0, [r0, #4]
   b46e2:	2100      	movs	r1, #0
   b46e4:	f7ff be9c 	b.w	b4420 <network_is_on>

000b46e8 <_ZN5spark12NetworkClass5isOffEv>:
}

bool NetworkClass::isOff() {
    return network_is_off(*this, nullptr);
   b46e8:	6840      	ldr	r0, [r0, #4]
   b46ea:	2100      	movs	r1, #0
   b46ec:	f7ff bea0 	b.w	b4430 <network_is_off>

000b46f0 <_ZN5spark12NetworkClass6listenEb>:
}

void NetworkClass::listen(bool begin) {
    network_listen(*this, begin ? 0 : 1, nullptr);
   b46f0:	6840      	ldr	r0, [r0, #4]
   b46f2:	2200      	movs	r2, #0
   b46f4:	f081 0101 	eor.w	r1, r1, #1
   b46f8:	f7ff be72 	b.w	b43e0 <network_listen>

000b46fc <_ZN5spark12NetworkClass16setListenTimeoutEt>:
}

void NetworkClass::setListenTimeout(uint16_t timeout) {
    network_set_listen_timeout(*this, timeout, nullptr);
   b46fc:	6840      	ldr	r0, [r0, #4]
   b46fe:	2200      	movs	r2, #0
   b4700:	f7ff be7e 	b.w	b4400 <network_set_listen_timeout>

000b4704 <_ZN5spark12NetworkClass16getListenTimeoutEv>:
}

uint16_t NetworkClass::getListenTimeout() {
    return network_get_listen_timeout(*this, 0, nullptr);
   b4704:	2200      	movs	r2, #0
   b4706:	6840      	ldr	r0, [r0, #4]
   b4708:	4611      	mov	r1, r2
   b470a:	f7ff be81 	b.w	b4410 <network_get_listen_timeout>

000b470e <_ZN5spark12NetworkClass9listeningEv>:
}

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
   b470e:	2200      	movs	r2, #0
   b4710:	6840      	ldr	r0, [r0, #4]
   b4712:	4611      	mov	r1, r2
   b4714:	f7ff be6c 	b.w	b43f0 <network_listening>

000b4718 <_ZN5spark12NetworkClass7resolveEPKc>:
}

IPAddress NetworkClass::resolve(const char* name) {
   b4718:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   b471c:	b095      	sub	sp, #84	; 0x54
   b471e:	4614      	mov	r4, r2
   b4720:	460d      	mov	r5, r1
   b4722:	4607      	mov	r7, r0
    IPAddress addr;
   b4724:	f7ff ff76 	bl	b4614 <_ZN9IPAddressC1Ev>
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
   b4728:	2100      	movs	r1, #0
    struct addrinfo hints = {};
   b472a:	221c      	movs	r2, #28
   b472c:	a80d      	add	r0, sp, #52	; 0x34
    struct addrinfo *ai = nullptr;
   b472e:	9100      	str	r1, [sp, #0]
    struct addrinfo hints = {};
   b4730:	f000 fb84 	bl	b4e3c <memset>
    hints.ai_flags = AI_ADDRCONFIG;
   b4734:	2340      	movs	r3, #64	; 0x40
   b4736:	930c      	str	r3, [sp, #48]	; 0x30
    hints.ai_family = AF_UNSPEC;
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
   b4738:	4620      	mov	r0, r4
   b473a:	466b      	mov	r3, sp
   b473c:	aa0c      	add	r2, sp, #48	; 0x30
   b473e:	2100      	movs	r1, #0
   b4740:	f7ff fd62 	bl	b4208 <netdb_getaddrinfo>
    if (!r) {
   b4744:	4604      	mov	r4, r0
   b4746:	2800      	cmp	r0, #0
   b4748:	d14b      	bne.n	b47e2 <_ZN5spark12NetworkClass7resolveEPKc+0xca>
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   b474a:	4602      	mov	r2, r0
   b474c:	2101      	movs	r1, #1
   b474e:	6868      	ldr	r0, [r5, #4]
   b4750:	f7ff fe2e 	bl	b43b0 <network_ready>
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   b4754:	2102      	movs	r1, #2
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   b4756:	4680      	mov	r8, r0
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   b4758:	4622      	mov	r2, r4
   b475a:	6868      	ldr	r0, [r5, #4]
   b475c:	f7ff fe28 	bl	b43b0 <network_ready>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   b4760:	9e00      	ldr	r6, [sp, #0]
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   b4762:	4681      	mov	r9, r0
        bool ok = false;
   b4764:	4621      	mov	r1, r4
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   b4766:	2e00      	cmp	r6, #0
   b4768:	d03b      	beq.n	b47e2 <_ZN5spark12NetworkClass7resolveEPKc+0xca>
   b476a:	2900      	cmp	r1, #0
   b476c:	d139      	bne.n	b47e2 <_ZN5spark12NetworkClass7resolveEPKc+0xca>
            // NOTE: using only the first entry that matches the current state of IPv4/IPv6 connectivity
            switch (cur->ai_family) {
   b476e:	6873      	ldr	r3, [r6, #4]
   b4770:	2b02      	cmp	r3, #2
   b4772:	d003      	beq.n	b477c <_ZN5spark12NetworkClass7resolveEPKc+0x64>
   b4774:	2b0a      	cmp	r3, #10
   b4776:	d011      	beq.n	b479c <_ZN5spark12NetworkClass7resolveEPKc+0x84>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   b4778:	69f6      	ldr	r6, [r6, #28]
   b477a:	e7f4      	b.n	b4766 <_ZN5spark12NetworkClass7resolveEPKc+0x4e>
                case AF_INET: {
                    if (!ipv4) {
   b477c:	f1b8 0f00 	cmp.w	r8, #0
   b4780:	d0fa      	beq.n	b4778 <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                        continue;
                    }
                    // NOTE: HAL_IPAddress is little-endian
                    auto in = (struct sockaddr_in*)cur->ai_addr;
                    addr = (const uint8_t*)(&in->sin_addr.s_addr);
   b4782:	6971      	ldr	r1, [r6, #20]
        return *this = IPAddress(address);
   b4784:	a806      	add	r0, sp, #24
   b4786:	3104      	adds	r1, #4
class IPAddress : public Printable {
   b4788:	ad07      	add	r5, sp, #28
        return *this = IPAddress(address);
   b478a:	f7ff ff71 	bl	b4670 <_ZN9IPAddressC1EPKh>
class IPAddress : public Printable {
   b478e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b4790:	1d3c      	adds	r4, r7, #4
   b4792:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b4794:	682b      	ldr	r3, [r5, #0]
   b4796:	7023      	strb	r3, [r4, #0]
                    ok = true;
   b4798:	4641      	mov	r1, r8
        return *this = IPAddress(address);
   b479a:	e7ed      	b.n	b4778 <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                    break;
                }
                case AF_INET6: {
                    if (!ipv6) {
   b479c:	f1b9 0f00 	cmp.w	r9, #0
   b47a0:	d0ea      	beq.n	b4778 <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                        continue;
                    }
                    auto in6 = (struct sockaddr_in6*)cur->ai_addr;
   b47a2:	6974      	ldr	r4, [r6, #20]
                    HAL_IPAddress a = {};
   b47a4:	2210      	movs	r2, #16
   b47a6:	a801      	add	r0, sp, #4
   b47a8:	f000 fb48 	bl	b4e3c <memset>
                    a.v = 6;
   b47ac:	2306      	movs	r3, #6
   b47ae:	f88d 3014 	strb.w	r3, [sp, #20]
                    memcpy(a.ipv6, in6->sin6_addr.s6_addr, sizeof(a.ipv6));
   b47b2:	ad01      	add	r5, sp, #4
   b47b4:	f104 0308 	add.w	r3, r4, #8
   b47b8:	3418      	adds	r4, #24
   b47ba:	6818      	ldr	r0, [r3, #0]
   b47bc:	6859      	ldr	r1, [r3, #4]
   b47be:	462a      	mov	r2, r5
   b47c0:	c203      	stmia	r2!, {r0, r1}
   b47c2:	3308      	adds	r3, #8
   b47c4:	42a3      	cmp	r3, r4
   b47c6:	4615      	mov	r5, r2
   b47c8:	d1f7      	bne.n	b47ba <_ZN5spark12NetworkClass7resolveEPKc+0xa2>
                    addr = IPAddress(a);
   b47ca:	a901      	add	r1, sp, #4
   b47cc:	a806      	add	r0, sp, #24
class IPAddress : public Printable {
   b47ce:	ad07      	add	r5, sp, #28
   b47d0:	f7ff ff2e 	bl	b4630 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
   b47d4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b47d6:	1d3c      	adds	r4, r7, #4
   b47d8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b47da:	682b      	ldr	r3, [r5, #0]
   b47dc:	7023      	strb	r3, [r4, #0]
                    ok = true;
   b47de:	4649      	mov	r1, r9
   b47e0:	e7ca      	b.n	b4778 <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                    break;
                }
            }
        }
    }
    freeaddrinfo(ai);
   b47e2:	9800      	ldr	r0, [sp, #0]
   b47e4:	f7ff fd08 	bl	b41f8 <netdb_freeaddrinfo>
    return Cellular.resolve(name);
#endif // Wiring_Cellular

#endif // HAL_USE_INET_HAL_POSIX
    return addr;
}
   b47e8:	4638      	mov	r0, r7
   b47ea:	b015      	add	sp, #84	; 0x54
   b47ec:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

000b47f0 <_GLOBAL__sub_I__ZN5spark7NetworkE>:
   b47f0:	4b02      	ldr	r3, [pc, #8]	; (b47fc <_GLOBAL__sub_I__ZN5spark7NetworkE+0xc>)
   b47f2:	4a03      	ldr	r2, [pc, #12]	; (b4800 <_GLOBAL__sub_I__ZN5spark7NetworkE+0x10>)
   b47f4:	601a      	str	r2, [r3, #0]
   b47f6:	2200      	movs	r2, #0
   b47f8:	605a      	str	r2, [r3, #4]
    network_free_configuration(c, count, nullptr);
    return res;
}
#endif // HAL_USE_SOCKET_HAL_POSIX

} // spark
   b47fa:	4770      	bx	lr
   b47fc:	2003e6c8 	.word	0x2003e6c8
   b4800:	000b500c 	.word	0x000b500c

000b4804 <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
   b4804:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b4806:	4606      	mov	r6, r0
   b4808:	460d      	mov	r5, r1
  size_t n = 0;
   b480a:	188f      	adds	r7, r1, r2
   b480c:	2400      	movs	r4, #0
  while (size--) {
   b480e:	42bd      	cmp	r5, r7
   b4810:	d00c      	beq.n	b482c <_ZN5Print5writeEPKhj+0x28>
     int chunk = write(*buffer++);
   b4812:	6833      	ldr	r3, [r6, #0]
   b4814:	f815 1b01 	ldrb.w	r1, [r5], #1
   b4818:	689b      	ldr	r3, [r3, #8]
   b481a:	4630      	mov	r0, r6
   b481c:	4798      	blx	r3
     if (chunk>=0)
   b481e:	1e03      	subs	r3, r0, #0
   b4820:	db01      	blt.n	b4826 <_ZN5Print5writeEPKhj+0x22>
         n += chunk;
   b4822:	441c      	add	r4, r3
  while (size--) {
   b4824:	e7f3      	b.n	b480e <_ZN5Print5writeEPKhj+0xa>
     int chunk = write(*buffer++);
   b4826:	2c00      	cmp	r4, #0
   b4828:	bf08      	it	eq
   b482a:	461c      	moveq	r4, r3
             n = chunk;
         break;
     }
  }
  return n;
}
   b482c:	4620      	mov	r0, r4
   b482e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b4830 <_ZN5Print5writeEPKc>:
    size_t write(const char *str) {
   b4830:	b513      	push	{r0, r1, r4, lr}
   b4832:	4604      	mov	r4, r0
    }
   b4834:	4608      	mov	r0, r1
      if (str == NULL) return 0;
   b4836:	b159      	cbz	r1, b4850 <_ZN5Print5writeEPKc+0x20>
      return write((const uint8_t *)str, strlen(str));
   b4838:	9101      	str	r1, [sp, #4]
   b483a:	f7ff fbef 	bl	b401c <strlen>
   b483e:	6823      	ldr	r3, [r4, #0]
   b4840:	9901      	ldr	r1, [sp, #4]
   b4842:	68db      	ldr	r3, [r3, #12]
   b4844:	4602      	mov	r2, r0
   b4846:	4620      	mov	r0, r4
    }
   b4848:	b002      	add	sp, #8
   b484a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return write((const uint8_t *)str, strlen(str));
   b484e:	4718      	bx	r3
    }
   b4850:	b002      	add	sp, #8
   b4852:	bd10      	pop	{r4, pc}

000b4854 <_ZN5Print5printEc>:
  return write(str);
}

size_t Print::print(char c)
{
  return write(c);
   b4854:	6803      	ldr	r3, [r0, #0]
   b4856:	689b      	ldr	r3, [r3, #8]
   b4858:	4718      	bx	r3

000b485a <_ZN5Print7printlnEv>:
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
   b485a:	b538      	push	{r3, r4, r5, lr}
  size_t n = print('\r');
   b485c:	210d      	movs	r1, #13
{
   b485e:	4605      	mov	r5, r0
  size_t n = print('\r');
   b4860:	f7ff fff8 	bl	b4854 <_ZN5Print5printEc>
  n += print('\n');
   b4864:	210a      	movs	r1, #10
  size_t n = print('\r');
   b4866:	4604      	mov	r4, r0
  n += print('\n');
   b4868:	4628      	mov	r0, r5
   b486a:	f7ff fff3 	bl	b4854 <_ZN5Print5printEc>
  return n;
}
   b486e:	4420      	add	r0, r4
   b4870:	bd38      	pop	{r3, r4, r5, pc}

000b4872 <_ZN5Print11printNumberEmh>:
  return println(reinterpret_cast<const char*>(str));
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base) {
   b4872:	b530      	push	{r4, r5, lr}
   b4874:	b08b      	sub	sp, #44	; 0x2c
  char buf[8 * sizeof(n) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
   b4876:	2300      	movs	r3, #0

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
   b4878:	2a01      	cmp	r2, #1
  *str = '\0';
   b487a:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
  if (base < 2) base = 10;
   b487e:	bf98      	it	ls
   b4880:	220a      	movls	r2, #10
   b4882:	ac09      	add	r4, sp, #36	; 0x24

  do {
   decltype(n) m = n;
   n /= base;
   b4884:	460d      	mov	r5, r1
   b4886:	fbb1 f1f2 	udiv	r1, r1, r2
   char c = m - base * n;
   b488a:	fb01 5312 	mls	r3, r1, r2, r5
   b488e:	f003 03ff 	and.w	r3, r3, #255	; 0xff
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   b4892:	2b09      	cmp	r3, #9
   b4894:	bf94      	ite	ls
   b4896:	3330      	addls	r3, #48	; 0x30
   b4898:	3337      	addhi	r3, #55	; 0x37
   b489a:	b2db      	uxtb	r3, r3
  } while(n);
   b489c:	42aa      	cmp	r2, r5
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   b489e:	f804 3d01 	strb.w	r3, [r4, #-1]!
  } while(n);
   b48a2:	d9ef      	bls.n	b4884 <_ZN5Print11printNumberEmh+0x12>

  return write(str);
   b48a4:	4621      	mov	r1, r4
   b48a6:	f7ff ffc3 	bl	b4830 <_ZN5Print5writeEPKc>
}
   b48aa:	b00b      	add	sp, #44	; 0x2c
   b48ac:	bd30      	pop	{r4, r5, pc}
	...

000b48b0 <_GLOBAL__sub_I_RGB>:
	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
      };

    _Function_base() : _M_manager(nullptr) { }
   b48b0:	4b01      	ldr	r3, [pc, #4]	; (b48b8 <_GLOBAL__sub_I_RGB+0x8>)
   b48b2:	2200      	movs	r2, #0
   b48b4:	609a      	str	r2, [r3, #8]
{
    RGBClass* const d = static_cast<RGBClass*>(data);
    if (d->changeHandler_) {
        d->changeHandler_(r, g, b);
    }
}
   b48b6:	4770      	bx	lr
   b48b8:	2003e6d0 	.word	0x2003e6d0

000b48bc <_ZN8SPIClassC1E19hal_spi_interface_t>:
    }
    return particle::SPISettings(info->clock, info->bit_order, info->data_mode);
}
} // namespace

SPIClass::SPIClass(hal_spi_interface_t spi)
   b48bc:	b510      	push	{r4, lr}
   b48be:	4604      	mov	r4, r0
   b48c0:	4608      	mov	r0, r1
{
    _spi = spi;
   b48c2:	7021      	strb	r1, [r4, #0]
    hal_spi_init(_spi);
   b48c4:	f7ff fca8 	bl	b4218 <hal_spi_init>
    _dividerReference = SPI_CLK_SYSTEM; // 0 indicates the system clock
   b48c8:	2300      	movs	r3, #0
   b48ca:	6063      	str	r3, [r4, #4]
}
   b48cc:	4620      	mov	r0, r4
   b48ce:	bd10      	pop	{r4, pc}

000b48d0 <_GLOBAL__sub_I_System>:
} // namespace particle

// particle::Flag<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flag<TagT, ValueT>::Flag(ValueT val) :
        val_(val) {
   b48d0:	4b05      	ldr	r3, [pc, #20]	; (b48e8 <_GLOBAL__sub_I_System+0x18>)
   b48d2:	2202      	movs	r2, #2
   b48d4:	601a      	str	r2, [r3, #0]

class SystemSleepResult {
public:
    SystemSleepResult()
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE) {
   b48d6:	4b05      	ldr	r3, [pc, #20]	; (b48ec <_GLOBAL__sub_I_System+0x1c>)
    SleepResult() {}
   b48d8:	4a05      	ldr	r2, [pc, #20]	; (b48f0 <_GLOBAL__sub_I_System+0x20>)
   b48da:	609a      	str	r2, [r3, #8]
              error_(SYSTEM_ERROR_NONE) {
   b48dc:	2000      	movs	r0, #0
   b48de:	e9c3 0000 	strd	r0, r0, [r3]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
   b48e2:	f7ff bd21 	b.w	b4328 <set_system_mode>
   b48e6:	bf00      	nop
   b48e8:	2003e6ec 	.word	0x2003e6ec
   b48ec:	2003e6e0 	.word	0x2003e6e0
   b48f0:	ffff0000 	.word	0xffff0000

000b48f4 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT>:
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
            unix_time_cache = unix_time;
    }
}

const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;
   b48f4:	4b02      	ldr	r3, [pc, #8]	; (b4900 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0xc>)
   b48f6:	681a      	ldr	r2, [r3, #0]
   b48f8:	4b02      	ldr	r3, [pc, #8]	; (b4904 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0x10>)
   b48fa:	601a      	str	r2, [r3, #0]
{
  return isValid();
}


TimeClass Time;
   b48fc:	4770      	bx	lr
   b48fe:	bf00      	nop
   b4900:	2003e63c 	.word	0x2003e63c
   b4904:	2003e6f0 	.word	0x2003e6f0

000b4908 <_ZN11USARTSerialD1Ev>:
private:
  hal_usart_interface_t _serial;
  bool _blocking;
public:
  USARTSerial(hal_usart_interface_t serial, const hal_usart_buffer_config_t& config);
  virtual ~USARTSerial() {};
   b4908:	4770      	bx	lr

000b490a <_ZN11USARTSerial14blockOnOverrunEb>:
    hal_usart_half_duplex(_serial, Enable);
}

void USARTSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   b490a:	7441      	strb	r1, [r0, #17]
}
   b490c:	4770      	bx	lr

000b490e <_ZN11USARTSerial17availableForWriteEv>:


int USARTSerial::availableForWrite(void)
{
   b490e:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available_data_for_write(_serial));
   b4910:	7c00      	ldrb	r0, [r0, #16]
   b4912:	f7ff fcc1 	bl	b4298 <hal_usart_available_data_for_write>
}
   b4916:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   b491a:	bd08      	pop	{r3, pc}

000b491c <_ZN11USARTSerial9availableEv>:

int USARTSerial::available(void)
{
   b491c:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available(_serial));
   b491e:	7c00      	ldrb	r0, [r0, #16]
   b4920:	f7ff fc92 	bl	b4248 <hal_usart_available>
}
   b4924:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   b4928:	bd08      	pop	{r3, pc}

000b492a <_ZN11USARTSerial4peekEv>:

int USARTSerial::peek(void)
{
   b492a:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_peek(_serial));
   b492c:	7c00      	ldrb	r0, [r0, #16]
   b492e:	f7ff fc9b 	bl	b4268 <hal_usart_peek>
}
   b4932:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   b4936:	bd08      	pop	{r3, pc}

000b4938 <_ZN11USARTSerial4readEv>:

int USARTSerial::read(void)
{
   b4938:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_read(_serial));
   b493a:	7c00      	ldrb	r0, [r0, #16]
   b493c:	f7ff fc8c 	bl	b4258 <hal_usart_read>
}
   b4940:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   b4944:	bd08      	pop	{r3, pc}

000b4946 <_ZN11USARTSerial5flushEv>:

void USARTSerial::flush()
{
  hal_usart_flush(_serial);
   b4946:	7c00      	ldrb	r0, [r0, #16]
   b4948:	f7ff bc96 	b.w	b4278 <hal_usart_flush>

000b494c <_ZN11USARTSerial5writeEh>:
}

size_t USARTSerial::write(uint8_t c)
{
   b494c:	b537      	push	{r0, r1, r2, r4, r5, lr}
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   b494e:	7c45      	ldrb	r5, [r0, #17]
{
   b4950:	4604      	mov	r4, r0
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   b4952:	b12d      	cbz	r5, b4960 <_ZN11USARTSerial5writeEh+0x14>
    // the HAL always blocks.
	  return hal_usart_write(_serial, c);
   b4954:	7c20      	ldrb	r0, [r4, #16]
  }
  return 0;
}
   b4956:	b003      	add	sp, #12
   b4958:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
	  return hal_usart_write(_serial, c);
   b495c:	f7ff bc6c 	b.w	b4238 <hal_usart_write>
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   b4960:	7c00      	ldrb	r0, [r0, #16]
   b4962:	9101      	str	r1, [sp, #4]
   b4964:	f7ff fc98 	bl	b4298 <hal_usart_available_data_for_write>
   b4968:	2800      	cmp	r0, #0
   b496a:	9901      	ldr	r1, [sp, #4]
   b496c:	dcf2      	bgt.n	b4954 <_ZN11USARTSerial5writeEh+0x8>
}
   b496e:	4628      	mov	r0, r5
   b4970:	b003      	add	sp, #12
   b4972:	bd30      	pop	{r4, r5, pc}

000b4974 <_ZN11USARTSerialD0Ev>:
   b4974:	b510      	push	{r4, lr}
   b4976:	2114      	movs	r1, #20
   b4978:	4604      	mov	r4, r0
   b497a:	f7ff fb94 	bl	b40a6 <_ZdlPvj>
   b497e:	4620      	mov	r0, r4
   b4980:	bd10      	pop	{r4, pc}
	...

000b4984 <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t>:
USARTSerial::USARTSerial(hal_usart_interface_t serial, const hal_usart_buffer_config_t& config)
   b4984:	b510      	push	{r4, lr}
   b4986:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   b498a:	4604      	mov	r4, r0
   b498c:	4608      	mov	r0, r1
   b498e:	4611      	mov	r1, r2
   b4990:	2200      	movs	r2, #0
   b4992:	e9c4 2301 	strd	r2, r3, [r4, #4]
   b4996:	4b04      	ldr	r3, [pc, #16]	; (b49a8 <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t+0x24>)
   b4998:	6023      	str	r3, [r4, #0]
  _blocking = true;
   b499a:	2301      	movs	r3, #1
  _serial = serial;
   b499c:	7420      	strb	r0, [r4, #16]
  _blocking = true;
   b499e:	7463      	strb	r3, [r4, #17]
  hal_usart_init_ex(serial, &config, nullptr);
   b49a0:	f7ff fc82 	bl	b42a8 <hal_usart_init_ex>
}
   b49a4:	4620      	mov	r0, r4
   b49a6:	bd10      	pop	{r4, pc}
   b49a8:	000b5064 	.word	0x000b5064

000b49ac <_ZN9USBSerial14blockOnOverrunEb>:
  HAL_USB_USART_Flush_Data(_serial);
}

void USBSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   b49ac:	7441      	strb	r1, [r0, #17]
}
   b49ae:	4770      	bx	lr

000b49b0 <__tcf_0>:
}

USBSerial& _fetch_usbserial()
{
  HAL_USB_USART_Config conf = acquireSerialBuffer();
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   b49b0:	4770      	bx	lr

000b49b2 <_ZN9USBSerialD1Ev>:
#include "usb_hal.h"
#include "system_task.h"
#include "spark_wiring_startup.h"
#include "concurrent_hal.h"

class USBSerial : public Stream
   b49b2:	4770      	bx	lr

000b49b4 <_ZN9USBSerial4readEv>:
{
   b49b4:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
   b49b6:	2100      	movs	r1, #0
   b49b8:	7c00      	ldrb	r0, [r0, #16]
   b49ba:	f7ff fc9d 	bl	b42f8 <HAL_USB_USART_Receive_Data>
}
   b49be:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   b49c2:	bd08      	pop	{r3, pc}

000b49c4 <_ZN9USBSerial4peekEv>:
{
   b49c4:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, true));
   b49c6:	2101      	movs	r1, #1
   b49c8:	7c00      	ldrb	r0, [r0, #16]
   b49ca:	f7ff fc95 	bl	b42f8 <HAL_USB_USART_Receive_Data>
}
   b49ce:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   b49d2:	bd08      	pop	{r3, pc}

000b49d4 <_ZN9USBSerial17availableForWriteEv>:
{
   b49d4:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USB_USART_Available_Data_For_Write(_serial));
   b49d6:	7c00      	ldrb	r0, [r0, #16]
   b49d8:	f7ff fc86 	bl	b42e8 <HAL_USB_USART_Available_Data_For_Write>
}
   b49dc:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   b49e0:	bd08      	pop	{r3, pc}

000b49e2 <_ZN9USBSerial9availableEv>:
{
   b49e2:	b508      	push	{r3, lr}
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
   b49e4:	7c00      	ldrb	r0, [r0, #16]
   b49e6:	f7ff fc77 	bl	b42d8 <HAL_USB_USART_Available_Data>
}
   b49ea:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   b49ee:	bd08      	pop	{r3, pc}

000b49f0 <_ZN9USBSerial5writeEh>:
{
   b49f0:	b513      	push	{r0, r1, r4, lr}
   b49f2:	4604      	mov	r4, r0
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   b49f4:	7c00      	ldrb	r0, [r0, #16]
{
   b49f6:	9101      	str	r1, [sp, #4]
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   b49f8:	f7ff fc76 	bl	b42e8 <HAL_USB_USART_Available_Data_For_Write>
   b49fc:	2800      	cmp	r0, #0
   b49fe:	9901      	ldr	r1, [sp, #4]
   b4a00:	dc01      	bgt.n	b4a06 <_ZN9USBSerial5writeEh+0x16>
   b4a02:	7c60      	ldrb	r0, [r4, #17]
   b4a04:	b120      	cbz	r0, b4a10 <_ZN9USBSerial5writeEh+0x20>
    return std::max(0, (int)HAL_USB_USART_Send_Data(_serial, byte));
   b4a06:	7c20      	ldrb	r0, [r4, #16]
   b4a08:	f7ff fc7e 	bl	b4308 <HAL_USB_USART_Send_Data>
   b4a0c:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
}
   b4a10:	b002      	add	sp, #8
   b4a12:	bd10      	pop	{r4, pc}

000b4a14 <_ZN9USBSerial5flushEv>:
  HAL_USB_USART_Flush_Data(_serial);
   b4a14:	7c00      	ldrb	r0, [r0, #16]
   b4a16:	f7ff bc7f 	b.w	b4318 <HAL_USB_USART_Flush_Data>

000b4a1a <_ZN9USBSerialD0Ev>:
   b4a1a:	b510      	push	{r4, lr}
   b4a1c:	2114      	movs	r1, #20
   b4a1e:	4604      	mov	r4, r0
   b4a20:	f7ff fb41 	bl	b40a6 <_ZdlPvj>
   b4a24:	4620      	mov	r0, r4
   b4a26:	bd10      	pop	{r4, pc}

000b4a28 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>:
USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
   b4a28:	b510      	push	{r4, lr}
   b4a2a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   b4a2e:	4604      	mov	r4, r0
   b4a30:	4608      	mov	r0, r1
   b4a32:	2100      	movs	r1, #0
   b4a34:	e9c4 1301 	strd	r1, r3, [r4, #4]
   b4a38:	4b04      	ldr	r3, [pc, #16]	; (b4a4c <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config+0x24>)
   b4a3a:	6023      	str	r3, [r4, #0]
  _blocking = true;
   b4a3c:	2301      	movs	r3, #1
  _serial = serial;
   b4a3e:	7420      	strb	r0, [r4, #16]
  _blocking = true;
   b4a40:	7463      	strb	r3, [r4, #17]
  HAL_USB_USART_Init(_serial, &conf);
   b4a42:	4611      	mov	r1, r2
   b4a44:	f7ff fc38 	bl	b42b8 <HAL_USB_USART_Init>
}
   b4a48:	4620      	mov	r0, r4
   b4a4a:	bd10      	pop	{r4, pc}
   b4a4c:	000b5094 	.word	0x000b5094

000b4a50 <_ZN9USBSerial5beginEl>:
    HAL_USB_USART_Begin(_serial, speed, NULL);
   b4a50:	7c00      	ldrb	r0, [r0, #16]
   b4a52:	2200      	movs	r2, #0
   b4a54:	f7ff bc38 	b.w	b42c8 <HAL_USB_USART_Begin>

000b4a58 <_Z19acquireSerialBufferv>:
{
   b4a58:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = {};
   b4a5a:	2214      	movs	r2, #20
{
   b4a5c:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {};
   b4a5e:	2100      	movs	r1, #0
   b4a60:	f000 f9ec 	bl	b4e3c <memset>
}
   b4a64:	4620      	mov	r0, r4
   b4a66:	bd10      	pop	{r4, pc}

000b4a68 <_Z16_fetch_usbserialv>:
{
   b4a68:	b510      	push	{r4, lr}
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   b4a6a:	4c0f      	ldr	r4, [pc, #60]	; (b4aa8 <_Z16_fetch_usbserialv+0x40>)
{
   b4a6c:	b088      	sub	sp, #32
  HAL_USB_USART_Config conf = acquireSerialBuffer();
   b4a6e:	a803      	add	r0, sp, #12
   b4a70:	f7ff fff2 	bl	b4a58 <_Z19acquireSerialBufferv>
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   b4a74:	7821      	ldrb	r1, [r4, #0]
   b4a76:	f3bf 8f5b 	dmb	ish
   b4a7a:	f011 0101 	ands.w	r1, r1, #1
   b4a7e:	d10f      	bne.n	b4aa0 <_Z16_fetch_usbserialv+0x38>
   b4a80:	4620      	mov	r0, r4
   b4a82:	9101      	str	r1, [sp, #4]
   b4a84:	f7ff fb11 	bl	b40aa <__cxa_guard_acquire>
   b4a88:	9901      	ldr	r1, [sp, #4]
   b4a8a:	b148      	cbz	r0, b4aa0 <_Z16_fetch_usbserialv+0x38>
   b4a8c:	aa03      	add	r2, sp, #12
   b4a8e:	4807      	ldr	r0, [pc, #28]	; (b4aac <_Z16_fetch_usbserialv+0x44>)
   b4a90:	f7ff ffca 	bl	b4a28 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
   b4a94:	4620      	mov	r0, r4
   b4a96:	f7ff fb0d 	bl	b40b4 <__cxa_guard_release>
   b4a9a:	4805      	ldr	r0, [pc, #20]	; (b4ab0 <_Z16_fetch_usbserialv+0x48>)
   b4a9c:	f000 f9ba 	bl	b4e14 <atexit>
	return _usbserial;
}
   b4aa0:	4802      	ldr	r0, [pc, #8]	; (b4aac <_Z16_fetch_usbserialv+0x44>)
   b4aa2:	b008      	add	sp, #32
   b4aa4:	bd10      	pop	{r4, pc}
   b4aa6:	bf00      	nop
   b4aa8:	2003e6f4 	.word	0x2003e6f4
   b4aac:	2003e6f8 	.word	0x2003e6f8
   b4ab0:	000b49b1 	.word	0x000b49b1

000b4ab4 <_ZN5spark9WiFiClass5readyEv>:
    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
    }

    bool ready(void) {
        return network_ready(*this, 0, NULL);
   b4ab4:	2200      	movs	r2, #0
   b4ab6:	6840      	ldr	r0, [r0, #4]
   b4ab8:	4611      	mov	r1, r2
   b4aba:	f7ff bc79 	b.w	b43b0 <network_ready>

000b4abe <_ZN5spark9WiFiClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   b4abe:	2200      	movs	r2, #0
   b4ac0:	6840      	ldr	r0, [r0, #4]
   b4ac2:	4611      	mov	r1, r2
   b4ac4:	f7ff bc94 	b.w	b43f0 <network_listening>

000b4ac8 <_ZN5spark9WiFiClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
   b4ac8:	2200      	movs	r2, #0
   b4aca:	6840      	ldr	r0, [r0, #4]
   b4acc:	4611      	mov	r1, r2
   b4ace:	f7ff bc9f 	b.w	b4410 <network_get_listen_timeout>

000b4ad2 <_ZN5spark9WiFiClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
   b4ad2:	6840      	ldr	r0, [r0, #4]
   b4ad4:	2200      	movs	r2, #0
   b4ad6:	f7ff bc93 	b.w	b4400 <network_set_listen_timeout>

000b4ada <_ZN5spark9WiFiClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
   b4ada:	6840      	ldr	r0, [r0, #4]
   b4adc:	2200      	movs	r2, #0
   b4ade:	f081 0101 	eor.w	r1, r1, #1
   b4ae2:	f7ff bc7d 	b.w	b43e0 <network_listen>

000b4ae6 <_ZN5spark9WiFiClass3offEv>:
        network_off(*this, 0, 0, NULL);
   b4ae6:	2300      	movs	r3, #0
   b4ae8:	6840      	ldr	r0, [r0, #4]
   b4aea:	461a      	mov	r2, r3
   b4aec:	4619      	mov	r1, r3
   b4aee:	f7ff bc6f 	b.w	b43d0 <network_off>

000b4af2 <_ZN5spark9WiFiClass2onEv>:
        network_on(*this, 0, 0, NULL);
   b4af2:	2300      	movs	r3, #0
   b4af4:	6840      	ldr	r0, [r0, #4]
   b4af6:	461a      	mov	r2, r3
   b4af8:	4619      	mov	r1, r3
   b4afa:	f7ff bc61 	b.w	b43c0 <network_on>

000b4afe <_ZN5spark9WiFiClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
   b4afe:	2200      	movs	r2, #0
   b4b00:	6840      	ldr	r0, [r0, #4]
   b4b02:	4611      	mov	r1, r2
   b4b04:	f7ff bc44 	b.w	b4390 <network_connecting>

000b4b08 <_ZN5spark9WiFiClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   b4b08:	6840      	ldr	r0, [r0, #4]
   b4b0a:	2200      	movs	r2, #0
   b4b0c:	2102      	movs	r1, #2
   b4b0e:	f7ff bc47 	b.w	b43a0 <network_disconnect>

000b4b12 <_ZN5spark9WiFiClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
   b4b12:	2300      	movs	r3, #0
   b4b14:	6840      	ldr	r0, [r0, #4]
   b4b16:	461a      	mov	r2, r3
   b4b18:	f7ff bc32 	b.w	b4380 <network_connect>

000b4b1c <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t>:
   b4b1c:	4b02      	ldr	r3, [pc, #8]	; (b4b28 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0xc>)
   b4b1e:	2204      	movs	r2, #4
   b4b20:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_WIFI_STA) {
   b4b22:	4a02      	ldr	r2, [pc, #8]	; (b4b2c <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0x10>)
   b4b24:	601a      	str	r2, [r3, #0]
the same way.
*****************************************************************************/

    WiFiClass WiFi;
    // NetworkClass& Network = WiFi;
}
   b4b26:	4770      	bx	lr
   b4b28:	2003e70c 	.word	0x2003e70c
   b4b2c:	000b50c4 	.word	0x000b50c4

000b4b30 <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_>:

void module_user_init_hook()
{
#if HAL_PLATFORM_NEWLIB
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
        _impure_ptr = r;
   b4b30:	4b01      	ldr	r3, [pc, #4]	; (b4b38 <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_+0x8>)
   b4b32:	6018      	str	r0, [r3, #0]
    }, nullptr);
   b4b34:	4770      	bx	lr
   b4b36:	bf00      	nop
   b4b38:	2003e640 	.word	0x2003e640

000b4b3c <serialEventRun>:
{
   b4b3c:	b508      	push	{r3, lr}
    if (serialEvent && Serial.available()>0)
   b4b3e:	4b0b      	ldr	r3, [pc, #44]	; (b4b6c <serialEventRun+0x30>)
   b4b40:	b143      	cbz	r3, b4b54 <serialEventRun+0x18>
   b4b42:	f7ff ff91 	bl	b4a68 <_Z16_fetch_usbserialv>
   b4b46:	6803      	ldr	r3, [r0, #0]
   b4b48:	691b      	ldr	r3, [r3, #16]
   b4b4a:	4798      	blx	r3
   b4b4c:	2800      	cmp	r0, #0
   b4b4e:	dd01      	ble.n	b4b54 <serialEventRun+0x18>
        serialEvent();
   b4b50:	f3af 8000 	nop.w
    if (serialEvent1 && Serial1.available()>0)
   b4b54:	4b06      	ldr	r3, [pc, #24]	; (b4b70 <serialEventRun+0x34>)
   b4b56:	b143      	cbz	r3, b4b6a <serialEventRun+0x2e>
   b4b58:	f000 f936 	bl	b4dc8 <_Z22__fetch_global_Serial1v>
   b4b5c:	6803      	ldr	r3, [r0, #0]
   b4b5e:	691b      	ldr	r3, [r3, #16]
   b4b60:	4798      	blx	r3
   b4b62:	2800      	cmp	r0, #0
   b4b64:	dd01      	ble.n	b4b6a <serialEventRun+0x2e>
        serialEvent1();
   b4b66:	f3af 8000 	nop.w
}
   b4b6a:	bd08      	pop	{r3, pc}
	...

000b4b74 <_post_loop>:
{
   b4b74:	b508      	push	{r3, lr}
	serialEventRun();
   b4b76:	f7ff ffe1 	bl	b4b3c <serialEventRun>
		return !thread || !thread->isRunning();
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
   b4b7a:	f7ff fae5 	bl	b4148 <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
   b4b7e:	4b01      	ldr	r3, [pc, #4]	; (b4b84 <_post_loop+0x10>)
   b4b80:	6018      	str	r0, [r3, #0]
}
   b4b82:	bd08      	pop	{r3, pc}
   b4b84:	2003e728 	.word	0x2003e728

000b4b88 <_Z33system_initialize_user_backup_ramv>:
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
   b4b88:	4805      	ldr	r0, [pc, #20]	; (b4ba0 <_Z33system_initialize_user_backup_ramv+0x18>)
   b4b8a:	4a06      	ldr	r2, [pc, #24]	; (b4ba4 <_Z33system_initialize_user_backup_ramv+0x1c>)
   b4b8c:	4906      	ldr	r1, [pc, #24]	; (b4ba8 <_Z33system_initialize_user_backup_ramv+0x20>)
{
   b4b8e:	b508      	push	{r3, lr}
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
   b4b90:	1a12      	subs	r2, r2, r0
   b4b92:	f000 f945 	bl	b4e20 <memcpy>
    __backup_sram_signature = signature;
   b4b96:	4b05      	ldr	r3, [pc, #20]	; (b4bac <_Z33system_initialize_user_backup_ramv+0x24>)
   b4b98:	4a05      	ldr	r2, [pc, #20]	; (b4bb0 <_Z33system_initialize_user_backup_ramv+0x28>)
   b4b9a:	601a      	str	r2, [r3, #0]
}
   b4b9c:	bd08      	pop	{r3, pc}
   b4b9e:	bf00      	nop
   b4ba0:	2003f400 	.word	0x2003f400
   b4ba4:	2003f404 	.word	0x2003f404
   b4ba8:	000b5220 	.word	0x000b5220
   b4bac:	2003f400 	.word	0x2003f400
   b4bb0:	9a271c1e 	.word	0x9a271c1e

000b4bb4 <_Z27ctrl_request_custom_handlerP12ctrl_request>:
void __attribute((weak)) ctrl_request_custom_handler(ctrl_request* req) {
   b4bb4:	b507      	push	{r0, r1, r2, lr}
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   b4bb6:	2300      	movs	r3, #0
   b4bb8:	9300      	str	r3, [sp, #0]
   b4bba:	461a      	mov	r2, r3
   b4bbc:	f06f 0177 	mvn.w	r1, #119	; 0x77
   b4bc0:	f7ff fbcc 	bl	b435c <system_ctrl_set_result>
}
   b4bc4:	b003      	add	sp, #12
   b4bc6:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000b4bcc <_ZL20ctrl_request_handlerP12ctrl_request>:
static void ctrl_request_handler(ctrl_request* req) {
   b4bcc:	b507      	push	{r0, r1, r2, lr}
    switch (req->type) {
   b4bce:	8843      	ldrh	r3, [r0, #2]
   b4bd0:	2b0a      	cmp	r3, #10
   b4bd2:	d008      	beq.n	b4be6 <_ZL20ctrl_request_handlerP12ctrl_request+0x1a>
   b4bd4:	2b50      	cmp	r3, #80	; 0x50
   b4bd6:	d10b      	bne.n	b4bf0 <_ZL20ctrl_request_handlerP12ctrl_request+0x24>
        if (log_process_ctrl_request_callback) {
   b4bd8:	4b09      	ldr	r3, [pc, #36]	; (b4c00 <_ZL20ctrl_request_handlerP12ctrl_request+0x34>)
   b4bda:	681b      	ldr	r3, [r3, #0]
   b4bdc:	b14b      	cbz	r3, b4bf2 <_ZL20ctrl_request_handlerP12ctrl_request+0x26>
}
   b4bde:	b003      	add	sp, #12
   b4be0:	f85d eb04 	ldr.w	lr, [sp], #4
            log_process_ctrl_request_callback(req);
   b4be4:	4718      	bx	r3
        ctrl_request_custom_handler(req);
   b4be6:	f7ff ffe5 	bl	b4bb4 <_Z27ctrl_request_custom_handlerP12ctrl_request>
}
   b4bea:	b003      	add	sp, #12
   b4bec:	f85d fb04 	ldr.w	pc, [sp], #4
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   b4bf0:	2300      	movs	r3, #0
   b4bf2:	9300      	str	r3, [sp, #0]
   b4bf4:	461a      	mov	r2, r3
   b4bf6:	f06f 0177 	mvn.w	r1, #119	; 0x77
   b4bfa:	f7ff fbaf 	bl	b435c <system_ctrl_set_result>
}
   b4bfe:	e7f4      	b.n	b4bea <_ZL20ctrl_request_handlerP12ctrl_request+0x1e>
   b4c00:	2003e718 	.word	0x2003e718

000b4c04 <module_user_init_hook>:
{
   b4c04:	b510      	push	{r4, lr}
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
   b4c06:	4812      	ldr	r0, [pc, #72]	; (b4c50 <module_user_init_hook+0x4c>)
   b4c08:	2100      	movs	r1, #0
   b4c0a:	f7ff fc31 	bl	b4470 <newlib_impure_ptr_callback>
#endif // HAL_PLATFORM_NEWLIB

#if HAL_PLATFORM_BACKUP_RAM
    backup_ram_was_valid_ = __backup_sram_signature == signature;
   b4c0e:	4b11      	ldr	r3, [pc, #68]	; (b4c54 <module_user_init_hook+0x50>)
   b4c10:	681a      	ldr	r2, [r3, #0]
   b4c12:	4b11      	ldr	r3, [pc, #68]	; (b4c58 <module_user_init_hook+0x54>)
   b4c14:	429a      	cmp	r2, r3
   b4c16:	4b11      	ldr	r3, [pc, #68]	; (b4c5c <module_user_init_hook+0x58>)
   b4c18:	bf0c      	ite	eq
   b4c1a:	2201      	moveq	r2, #1
   b4c1c:	2200      	movne	r2, #0
   b4c1e:	701a      	strb	r2, [r3, #0]
    if (!backup_ram_was_valid_) {
   b4c20:	d001      	beq.n	b4c26 <module_user_init_hook+0x22>
        system_initialize_user_backup_ram();
   b4c22:	f7ff ffb1 	bl	b4b88 <_Z33system_initialize_user_backup_ramv>
    }
#endif

#if HAL_PLATFORM_RNG
    // Initialize the default stdlib PRNG using hardware RNG as a seed
    const uint32_t seed = HAL_RNG_GetRandomNumber();
   b4c26:	f7ff fa87 	bl	b4138 <HAL_RNG_GetRandomNumber>
   b4c2a:	4604      	mov	r4, r0
    srand(seed);
   b4c2c:	f000 f90e 	bl	b4e4c <srand>

    // If the user defines random_seed_from_cloud, call it with a seed value
    // generated by a hardware RNG as well.
    if (random_seed_from_cloud) {
   b4c30:	4b0b      	ldr	r3, [pc, #44]	; (b4c60 <module_user_init_hook+0x5c>)
   b4c32:	b113      	cbz	r3, b4c3a <module_user_init_hook+0x36>
        random_seed_from_cloud(seed);
   b4c34:	4620      	mov	r0, r4
   b4c36:	f3af 8000 	nop.w
    }
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);
   b4c3a:	2100      	movs	r1, #0
   b4c3c:	4808      	ldr	r0, [pc, #32]	; (b4c60 <module_user_init_hook+0x5c>)
   b4c3e:	f7ff fb97 	bl	b4370 <spark_set_random_seed_from_cloud_handler>

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
}
   b4c42:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
   b4c46:	4807      	ldr	r0, [pc, #28]	; (b4c64 <module_user_init_hook+0x60>)
   b4c48:	2100      	movs	r1, #0
   b4c4a:	f7ff bb7d 	b.w	b4348 <system_ctrl_set_app_request_handler>
   b4c4e:	bf00      	nop
   b4c50:	000b4b31 	.word	0x000b4b31
   b4c54:	2003f400 	.word	0x2003f400
   b4c58:	9a271c1e 	.word	0x9a271c1e
   b4c5c:	2003e714 	.word	0x2003e714
   b4c60:	00000000 	.word	0x00000000
   b4c64:	000b4bcd 	.word	0x000b4bcd

000b4c68 <pinAvailable>:
/*
 * @brief Perform safety check on desired pin to see if it's already
 * being used.  Return 0 if used, otherwise return 1 if available.
 */
bool pinAvailable(uint16_t pin) {
  if (pin >= TOTAL_PINS) {
   b4c68:	2823      	cmp	r0, #35	; 0x23
bool pinAvailable(uint16_t pin) {
   b4c6a:	b513      	push	{r0, r1, r4, lr}
  if (pin >= TOTAL_PINS) {
   b4c6c:	d902      	bls.n	b4c74 <pinAvailable+0xc>
    return false;
   b4c6e:	2000      	movs	r0, #0
    return false; // 'pin' is used
  }
#endif

  return true; // 'pin' is available
}
   b4c70:	b002      	add	sp, #8
   b4c72:	bd10      	pop	{r4, pc}
  if((pin == SCK || pin == MOSI || pin == MISO) && hal_spi_is_enabled(SPI.interface()) == true)
   b4c74:	f1a0 030b 	sub.w	r3, r0, #11
   b4c78:	2b02      	cmp	r3, #2
   b4c7a:	d81a      	bhi.n	b4cb2 <pinAvailable+0x4a>

template <hal_spi_interface_t Interface>
class SpiProxy {
public:
    static SPIClass& instance() {
        static SPIClass instance(Interface);
   b4c7c:	4c17      	ldr	r4, [pc, #92]	; (b4cdc <pinAvailable+0x74>)
   b4c7e:	7821      	ldrb	r1, [r4, #0]
   b4c80:	f3bf 8f5b 	dmb	ish
   b4c84:	f011 0101 	ands.w	r1, r1, #1
   b4c88:	d10b      	bne.n	b4ca2 <pinAvailable+0x3a>
   b4c8a:	4620      	mov	r0, r4
   b4c8c:	9101      	str	r1, [sp, #4]
   b4c8e:	f7ff fa0c 	bl	b40aa <__cxa_guard_acquire>
   b4c92:	9901      	ldr	r1, [sp, #4]
   b4c94:	b128      	cbz	r0, b4ca2 <pinAvailable+0x3a>
   b4c96:	4812      	ldr	r0, [pc, #72]	; (b4ce0 <pinAvailable+0x78>)
   b4c98:	f7ff fe10 	bl	b48bc <_ZN8SPIClassC1E19hal_spi_interface_t>
   b4c9c:	4620      	mov	r0, r4
   b4c9e:	f7ff fa09 	bl	b40b4 <__cxa_guard_release>
   b4ca2:	4b0f      	ldr	r3, [pc, #60]	; (b4ce0 <pinAvailable+0x78>)
   b4ca4:	7818      	ldrb	r0, [r3, #0]
   b4ca6:	f7ff fabf 	bl	b4228 <hal_spi_is_enabled>
   b4caa:	2800      	cmp	r0, #0
   b4cac:	d1df      	bne.n	b4c6e <pinAvailable+0x6>
  return true; // 'pin' is available
   b4cae:	2001      	movs	r0, #1
   b4cb0:	e7de      	b.n	b4c70 <pinAvailable+0x8>
  if((pin == SCL || pin == SDA) && hal_i2c_is_enabled(Wire.interface(), nullptr) == true)
   b4cb2:	2801      	cmp	r0, #1
   b4cb4:	d809      	bhi.n	b4cca <pinAvailable+0x62>
   b4cb6:	f000 f847 	bl	b4d48 <_Z19__fetch_global_Wirev>
   b4cba:	2100      	movs	r1, #0
   b4cbc:	7c00      	ldrb	r0, [r0, #16]
   b4cbe:	f7ff fa83 	bl	b41c8 <hal_i2c_is_enabled>
  if((pin == RX || pin == TX) && hal_usart_is_enabled(Serial1.interface()) == true)
   b4cc2:	f080 0001 	eor.w	r0, r0, #1
   b4cc6:	b2c0      	uxtb	r0, r0
   b4cc8:	e7d2      	b.n	b4c70 <pinAvailable+0x8>
   b4cca:	3809      	subs	r0, #9
   b4ccc:	2801      	cmp	r0, #1
   b4cce:	d8ee      	bhi.n	b4cae <pinAvailable+0x46>
   b4cd0:	f000 f87a 	bl	b4dc8 <_Z22__fetch_global_Serial1v>
   b4cd4:	7c00      	ldrb	r0, [r0, #16]
   b4cd6:	f7ff fad7 	bl	b4288 <hal_usart_is_enabled>
   b4cda:	e7f2      	b.n	b4cc2 <pinAvailable+0x5a>
   b4cdc:	2003e71c 	.word	0x2003e71c
   b4ce0:	2003e720 	.word	0x2003e720

000b4ce4 <analogRead>:
int32_t analogRead(hal_pin_t pin)
{
#if !HAL_PLATFORM_RTL872X
  // Allow people to use 0-7 to define analog pins by checking to see if the values are too low.
#if defined(FIRST_ANALOG_PIN) && FIRST_ANALOG_PIN > 0
  if(pin < FIRST_ANALOG_PIN)
   b4ce4:	280d      	cmp	r0, #13
{
   b4ce6:	b510      	push	{r4, lr}
   b4ce8:	4604      	mov	r4, r0
  {
    pin = pin + FIRST_ANALOG_PIN;
   b4cea:	bf9c      	itt	ls
   b4cec:	340e      	addls	r4, #14
   b4cee:	b2a4      	uxthls	r4, r4
  }
#endif // defined(FIRST_ANALOG_PIN) && FIRST_ANALOG_PIN > 0
#endif

  // Safety check
  if( !pinAvailable(pin) ) {
   b4cf0:	4620      	mov	r0, r4
   b4cf2:	f7ff ffb9 	bl	b4c68 <pinAvailable>
   b4cf6:	b150      	cbz	r0, b4d0e <analogRead+0x2a>
    return LOW;
  }

  if(hal_pin_validate_function(pin, PF_ADC)!=PF_ADC)
   b4cf8:	2103      	movs	r1, #3
   b4cfa:	4620      	mov	r0, r4
   b4cfc:	f7ff fa2c 	bl	b4158 <hal_pin_validate_function>
   b4d00:	2803      	cmp	r0, #3
   b4d02:	d104      	bne.n	b4d0e <analogRead+0x2a>
  {
    return LOW;
  }

  return hal_adc_read(pin);
   b4d04:	4620      	mov	r0, r4
}
   b4d06:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  return hal_adc_read(pin);
   b4d0a:	f7ff ba2d 	b.w	b4168 <hal_adc_read>
}
   b4d0e:	2000      	movs	r0, #0
   b4d10:	bd10      	pop	{r4, pc}

000b4d12 <__tcf_0>:
}
#endif

TwoWire& __fetch_global_Wire()
{
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   b4d12:	4770      	bx	lr

000b4d14 <_Z17acquireWireBufferv>:
{
   b4d14:	b538      	push	{r3, r4, r5, lr}
	hal_i2c_config_t config = {
   b4d16:	4b0a      	ldr	r3, [pc, #40]	; (b4d40 <_Z17acquireWireBufferv+0x2c>)
   b4d18:	6003      	str	r3, [r0, #0]
   b4d1a:	2301      	movs	r3, #1
{
   b4d1c:	4604      	mov	r4, r0
	hal_i2c_config_t config = {
   b4d1e:	6143      	str	r3, [r0, #20]
		.rx_buffer = new (std::nothrow) uint8_t[i2c_buffer_size],
   b4d20:	4908      	ldr	r1, [pc, #32]	; (b4d44 <_Z17acquireWireBufferv+0x30>)
   b4d22:	2020      	movs	r0, #32
   b4d24:	f000 f874 	bl	b4e10 <_ZnajRKSt9nothrow_t>
	};
   b4d28:	2520      	movs	r5, #32
   b4d2a:	6060      	str	r0, [r4, #4]
		.tx_buffer = new (std::nothrow) uint8_t[i2c_buffer_size],
   b4d2c:	4905      	ldr	r1, [pc, #20]	; (b4d44 <_Z17acquireWireBufferv+0x30>)
	};
   b4d2e:	60a5      	str	r5, [r4, #8]
		.tx_buffer = new (std::nothrow) uint8_t[i2c_buffer_size],
   b4d30:	4628      	mov	r0, r5
   b4d32:	f000 f86d 	bl	b4e10 <_ZnajRKSt9nothrow_t>
	};
   b4d36:	e9c4 0503 	strd	r0, r5, [r4, #12]
}
   b4d3a:	4620      	mov	r0, r4
   b4d3c:	bd38      	pop	{r3, r4, r5, pc}
   b4d3e:	bf00      	nop
   b4d40:	00010018 	.word	0x00010018
   b4d44:	000b50f8 	.word	0x000b50f8

000b4d48 <_Z19__fetch_global_Wirev>:
{
   b4d48:	b530      	push	{r4, r5, lr}
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   b4d4a:	4d0e      	ldr	r5, [pc, #56]	; (b4d84 <_Z19__fetch_global_Wirev+0x3c>)
   b4d4c:	7829      	ldrb	r1, [r5, #0]
   b4d4e:	f3bf 8f5b 	dmb	ish
   b4d52:	f011 0401 	ands.w	r4, r1, #1
{
   b4d56:	b087      	sub	sp, #28
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   b4d58:	d111      	bne.n	b4d7e <_Z19__fetch_global_Wirev+0x36>
   b4d5a:	4628      	mov	r0, r5
   b4d5c:	f7ff f9a5 	bl	b40aa <__cxa_guard_acquire>
   b4d60:	b168      	cbz	r0, b4d7e <_Z19__fetch_global_Wirev+0x36>
   b4d62:	4668      	mov	r0, sp
   b4d64:	f7ff ffd6 	bl	b4d14 <_Z17acquireWireBufferv>
   b4d68:	466a      	mov	r2, sp
   b4d6a:	4621      	mov	r1, r4
   b4d6c:	4806      	ldr	r0, [pc, #24]	; (b4d88 <_Z19__fetch_global_Wirev+0x40>)
   b4d6e:	f7ff fbf9 	bl	b4564 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>
   b4d72:	4628      	mov	r0, r5
   b4d74:	f7ff f99e 	bl	b40b4 <__cxa_guard_release>
   b4d78:	4804      	ldr	r0, [pc, #16]	; (b4d8c <_Z19__fetch_global_Wirev+0x44>)
   b4d7a:	f000 f84b 	bl	b4e14 <atexit>
	return wire;
}
   b4d7e:	4802      	ldr	r0, [pc, #8]	; (b4d88 <_Z19__fetch_global_Wirev+0x40>)
   b4d80:	b007      	add	sp, #28
   b4d82:	bd30      	pop	{r4, r5, pc}
   b4d84:	2003e72c 	.word	0x2003e72c
   b4d88:	2003e730 	.word	0x2003e730
   b4d8c:	000b4d13 	.word	0x000b4d13

000b4d90 <__tcf_0>:
}
#endif

USARTSerial& __fetch_global_Serial1()
{
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
   b4d90:	4770      	bx	lr
	...

000b4d94 <_Z20acquireSerial1Bufferv>:
{
   b4d94:	b538      	push	{r3, r4, r5, lr}
   b4d96:	4604      	mov	r4, r0
    hal_usart_buffer_config_t config = {
   b4d98:	2514      	movs	r5, #20
   b4d9a:	462a      	mov	r2, r5
   b4d9c:	2100      	movs	r1, #0
   b4d9e:	f000 f84d 	bl	b4e3c <memset>
   b4da2:	8025      	strh	r5, [r4, #0]
   b4da4:	2540      	movs	r5, #64	; 0x40
        .rx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b4da6:	4907      	ldr	r1, [pc, #28]	; (b4dc4 <_Z20acquireSerial1Bufferv+0x30>)
    hal_usart_buffer_config_t config = {
   b4da8:	8125      	strh	r5, [r4, #8]
        .rx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b4daa:	4628      	mov	r0, r5
    hal_usart_buffer_config_t config = {
   b4dac:	8225      	strh	r5, [r4, #16]
        .rx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b4dae:	f000 f82f 	bl	b4e10 <_ZnajRKSt9nothrow_t>
        .tx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b4db2:	4904      	ldr	r1, [pc, #16]	; (b4dc4 <_Z20acquireSerial1Bufferv+0x30>)
    };
   b4db4:	6060      	str	r0, [r4, #4]
        .tx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b4db6:	4628      	mov	r0, r5
   b4db8:	f000 f82a 	bl	b4e10 <_ZnajRKSt9nothrow_t>
    };
   b4dbc:	60e0      	str	r0, [r4, #12]
}
   b4dbe:	4620      	mov	r0, r4
   b4dc0:	bd38      	pop	{r3, r4, r5, pc}
   b4dc2:	bf00      	nop
   b4dc4:	000b50f8 	.word	0x000b50f8

000b4dc8 <_Z22__fetch_global_Serial1v>:
{
   b4dc8:	b530      	push	{r4, r5, lr}
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
   b4dca:	4d0e      	ldr	r5, [pc, #56]	; (b4e04 <_Z22__fetch_global_Serial1v+0x3c>)
   b4dcc:	7829      	ldrb	r1, [r5, #0]
   b4dce:	f3bf 8f5b 	dmb	ish
   b4dd2:	f011 0401 	ands.w	r4, r1, #1
{
   b4dd6:	b087      	sub	sp, #28
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
   b4dd8:	d111      	bne.n	b4dfe <_Z22__fetch_global_Serial1v+0x36>
   b4dda:	4628      	mov	r0, r5
   b4ddc:	f7ff f965 	bl	b40aa <__cxa_guard_acquire>
   b4de0:	b168      	cbz	r0, b4dfe <_Z22__fetch_global_Serial1v+0x36>
   b4de2:	a801      	add	r0, sp, #4
   b4de4:	f7ff ffd6 	bl	b4d94 <_Z20acquireSerial1Bufferv>
   b4de8:	aa01      	add	r2, sp, #4
   b4dea:	4621      	mov	r1, r4
   b4dec:	4806      	ldr	r0, [pc, #24]	; (b4e08 <_Z22__fetch_global_Serial1v+0x40>)
   b4dee:	f7ff fdc9 	bl	b4984 <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t>
   b4df2:	4628      	mov	r0, r5
   b4df4:	f7ff f95e 	bl	b40b4 <__cxa_guard_release>
   b4df8:	4804      	ldr	r0, [pc, #16]	; (b4e0c <_Z22__fetch_global_Serial1v+0x44>)
   b4dfa:	f000 f80b 	bl	b4e14 <atexit>
    return serial1;
}
   b4dfe:	4802      	ldr	r0, [pc, #8]	; (b4e08 <_Z22__fetch_global_Serial1v+0x40>)
   b4e00:	b007      	add	sp, #28
   b4e02:	bd30      	pop	{r4, r5, pc}
   b4e04:	2003e744 	.word	0x2003e744
   b4e08:	2003e748 	.word	0x2003e748
   b4e0c:	000b4d91 	.word	0x000b4d91

000b4e10 <_ZnajRKSt9nothrow_t>:
   b4e10:	f7ff b947 	b.w	b40a2 <_Znaj>

000b4e14 <atexit>:
   b4e14:	2300      	movs	r3, #0
   b4e16:	4601      	mov	r1, r0
   b4e18:	461a      	mov	r2, r3
   b4e1a:	4618      	mov	r0, r3
   b4e1c:	f000 b844 	b.w	b4ea8 <__register_exitproc>

000b4e20 <memcpy>:
   b4e20:	440a      	add	r2, r1
   b4e22:	4291      	cmp	r1, r2
   b4e24:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
   b4e28:	d100      	bne.n	b4e2c <memcpy+0xc>
   b4e2a:	4770      	bx	lr
   b4e2c:	b510      	push	{r4, lr}
   b4e2e:	f811 4b01 	ldrb.w	r4, [r1], #1
   b4e32:	f803 4f01 	strb.w	r4, [r3, #1]!
   b4e36:	4291      	cmp	r1, r2
   b4e38:	d1f9      	bne.n	b4e2e <memcpy+0xe>
   b4e3a:	bd10      	pop	{r4, pc}

000b4e3c <memset>:
   b4e3c:	4402      	add	r2, r0
   b4e3e:	4603      	mov	r3, r0
   b4e40:	4293      	cmp	r3, r2
   b4e42:	d100      	bne.n	b4e46 <memset+0xa>
   b4e44:	4770      	bx	lr
   b4e46:	f803 1b01 	strb.w	r1, [r3], #1
   b4e4a:	e7f9      	b.n	b4e40 <memset+0x4>

000b4e4c <srand>:
   b4e4c:	b538      	push	{r3, r4, r5, lr}
   b4e4e:	4b10      	ldr	r3, [pc, #64]	; (b4e90 <srand+0x44>)
   b4e50:	681d      	ldr	r5, [r3, #0]
   b4e52:	6bab      	ldr	r3, [r5, #56]	; 0x38
   b4e54:	4604      	mov	r4, r0
   b4e56:	b9b3      	cbnz	r3, b4e86 <srand+0x3a>
   b4e58:	2018      	movs	r0, #24
   b4e5a:	f7ff faf1 	bl	b4440 <malloc>
   b4e5e:	4602      	mov	r2, r0
   b4e60:	63a8      	str	r0, [r5, #56]	; 0x38
   b4e62:	b920      	cbnz	r0, b4e6e <srand+0x22>
   b4e64:	4b0b      	ldr	r3, [pc, #44]	; (b4e94 <srand+0x48>)
   b4e66:	480c      	ldr	r0, [pc, #48]	; (b4e98 <srand+0x4c>)
   b4e68:	2142      	movs	r1, #66	; 0x42
   b4e6a:	f7ff faf9 	bl	b4460 <__assert_func>
   b4e6e:	490b      	ldr	r1, [pc, #44]	; (b4e9c <srand+0x50>)
   b4e70:	4b0b      	ldr	r3, [pc, #44]	; (b4ea0 <srand+0x54>)
   b4e72:	e9c0 1300 	strd	r1, r3, [r0]
   b4e76:	4b0b      	ldr	r3, [pc, #44]	; (b4ea4 <srand+0x58>)
   b4e78:	6083      	str	r3, [r0, #8]
   b4e7a:	230b      	movs	r3, #11
   b4e7c:	8183      	strh	r3, [r0, #12]
   b4e7e:	2100      	movs	r1, #0
   b4e80:	2001      	movs	r0, #1
   b4e82:	e9c2 0104 	strd	r0, r1, [r2, #16]
   b4e86:	6bab      	ldr	r3, [r5, #56]	; 0x38
   b4e88:	2200      	movs	r2, #0
   b4e8a:	611c      	str	r4, [r3, #16]
   b4e8c:	615a      	str	r2, [r3, #20]
   b4e8e:	bd38      	pop	{r3, r4, r5, pc}
   b4e90:	2003e640 	.word	0x2003e640
   b4e94:	000b50f9 	.word	0x000b50f9
   b4e98:	000b5110 	.word	0x000b5110
   b4e9c:	abcd330e 	.word	0xabcd330e
   b4ea0:	e66d1234 	.word	0xe66d1234
   b4ea4:	0005deec 	.word	0x0005deec

000b4ea8 <__register_exitproc>:
   b4ea8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   b4eac:	f8df 80b8 	ldr.w	r8, [pc, #184]	; b4f68 <__register_exitproc+0xc0>
   b4eb0:	4606      	mov	r6, r0
   b4eb2:	f8d8 0000 	ldr.w	r0, [r8]
   b4eb6:	461f      	mov	r7, r3
   b4eb8:	460d      	mov	r5, r1
   b4eba:	4691      	mov	r9, r2
   b4ebc:	f000 f856 	bl	b4f6c <__retarget_lock_acquire_recursive>
   b4ec0:	4b25      	ldr	r3, [pc, #148]	; (b4f58 <__register_exitproc+0xb0>)
   b4ec2:	681c      	ldr	r4, [r3, #0]
   b4ec4:	b934      	cbnz	r4, b4ed4 <__register_exitproc+0x2c>
   b4ec6:	4c25      	ldr	r4, [pc, #148]	; (b4f5c <__register_exitproc+0xb4>)
   b4ec8:	601c      	str	r4, [r3, #0]
   b4eca:	4b25      	ldr	r3, [pc, #148]	; (b4f60 <__register_exitproc+0xb8>)
   b4ecc:	b113      	cbz	r3, b4ed4 <__register_exitproc+0x2c>
   b4ece:	681b      	ldr	r3, [r3, #0]
   b4ed0:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
   b4ed4:	6863      	ldr	r3, [r4, #4]
   b4ed6:	2b1f      	cmp	r3, #31
   b4ed8:	dd07      	ble.n	b4eea <__register_exitproc+0x42>
   b4eda:	f8d8 0000 	ldr.w	r0, [r8]
   b4ede:	f000 f847 	bl	b4f70 <__retarget_lock_release_recursive>
   b4ee2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   b4ee6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   b4eea:	b34e      	cbz	r6, b4f40 <__register_exitproc+0x98>
   b4eec:	f8d4 0088 	ldr.w	r0, [r4, #136]	; 0x88
   b4ef0:	b988      	cbnz	r0, b4f16 <__register_exitproc+0x6e>
   b4ef2:	4b1c      	ldr	r3, [pc, #112]	; (b4f64 <__register_exitproc+0xbc>)
   b4ef4:	b923      	cbnz	r3, b4f00 <__register_exitproc+0x58>
   b4ef6:	f8d8 0000 	ldr.w	r0, [r8]
   b4efa:	f000 f838 	bl	b4f6e <__retarget_lock_release>
   b4efe:	e7f0      	b.n	b4ee2 <__register_exitproc+0x3a>
   b4f00:	f44f 7084 	mov.w	r0, #264	; 0x108
   b4f04:	f7ff fa9c 	bl	b4440 <malloc>
   b4f08:	2800      	cmp	r0, #0
   b4f0a:	d0f4      	beq.n	b4ef6 <__register_exitproc+0x4e>
   b4f0c:	2300      	movs	r3, #0
   b4f0e:	e9c0 3340 	strd	r3, r3, [r0, #256]	; 0x100
   b4f12:	f8c4 0088 	str.w	r0, [r4, #136]	; 0x88
   b4f16:	6863      	ldr	r3, [r4, #4]
   b4f18:	f840 9023 	str.w	r9, [r0, r3, lsl #2]
   b4f1c:	2201      	movs	r2, #1
   b4f1e:	409a      	lsls	r2, r3
   b4f20:	eb00 0183 	add.w	r1, r0, r3, lsl #2
   b4f24:	f8d0 3100 	ldr.w	r3, [r0, #256]	; 0x100
   b4f28:	4313      	orrs	r3, r2
   b4f2a:	f8c0 3100 	str.w	r3, [r0, #256]	; 0x100
   b4f2e:	2e02      	cmp	r6, #2
   b4f30:	f8c1 7080 	str.w	r7, [r1, #128]	; 0x80
   b4f34:	bf02      	ittt	eq
   b4f36:	f8d0 3104 	ldreq.w	r3, [r0, #260]	; 0x104
   b4f3a:	4313      	orreq	r3, r2
   b4f3c:	f8c0 3104 	streq.w	r3, [r0, #260]	; 0x104
   b4f40:	6863      	ldr	r3, [r4, #4]
   b4f42:	f8d8 0000 	ldr.w	r0, [r8]
   b4f46:	1c5a      	adds	r2, r3, #1
   b4f48:	3302      	adds	r3, #2
   b4f4a:	6062      	str	r2, [r4, #4]
   b4f4c:	f844 5023 	str.w	r5, [r4, r3, lsl #2]
   b4f50:	f000 f80e 	bl	b4f70 <__retarget_lock_release_recursive>
   b4f54:	2000      	movs	r0, #0
   b4f56:	e7c6      	b.n	b4ee6 <__register_exitproc+0x3e>
   b4f58:	2003e7e8 	.word	0x2003e7e8
   b4f5c:	2003e75c 	.word	0x2003e75c
   b4f60:	00000000 	.word	0x00000000
   b4f64:	000b4441 	.word	0x000b4441
   b4f68:	2003e6a4 	.word	0x2003e6a4

000b4f6c <__retarget_lock_acquire_recursive>:
   b4f6c:	4770      	bx	lr

000b4f6e <__retarget_lock_release>:
   b4f6e:	4770      	bx	lr

000b4f70 <__retarget_lock_release_recursive>:
   b4f70:	4770      	bx	lr

000b4f72 <link_code_end>:
	...

000b4f74 <dynalib_user>:
   b4f74:	402d 000b 4069 000b 4091 000b 4095 000b     -@..i@...@...@..
   b4f84:	0000 0000                                   ....

000b4f88 <_ZTVN5spark13EthernetClassE>:
	...
   b4f90:	44ef 000b 44e5 000b 44db 000b 44d1 000b     .D...D...D...D..
   b4fa0:	44c5 000b 44b9 000b 46e1 000b 46e9 000b     .D...D...F...F..
   b4fb0:	44ad 000b 44a5 000b 449b 000b 4491 000b     .D...D...D...D..
   b4fc0:	4719 000b                                   .G..

000b4fc4 <_ZTV7TwoWire>:
	...
   b4fcc:	450d 000b 4557 000b 452f 000b 450f 000b     .E..WE../E...E..
   b4fdc:	4537 000b 453f 000b 4547 000b 454f 000b     7E..?E..GE..OE..

000b4fec <_ZTV9IPAddress>:
	...
   b4ff4:	45b1 000b 45a1 000b 45a3 000b 7061 0070     .E...E...E..app.

000b5004 <_ZTVN5spark12NetworkClassE>:
	...
   b500c:	46a1 000b 46ab 000b 46b5 000b 46bf 000b     .F...F...F...F..
   b501c:	46c9 000b 46d5 000b 46e1 000b 46e9 000b     .F...F...F...F..
   b502c:	46f1 000b 46fd 000b 4705 000b 470f 000b     .F...F...G...G..
   b503c:	4719 000b 5925 252d 2d6d 6425 2554 3a48     .G..%Y-%m-%dT%H:
   b504c:	4d25 253a 2553 007a 7361 7463 6d69 0065     %M:%S%z.asctime.

000b505c <_ZTV11USARTSerial>:
	...
   b5064:	4909 000b 4975 000b 494d 000b 4805 000b     .I..uI..MI...H..
   b5074:	491d 000b 4939 000b 492b 000b 4947 000b     .I..9I..+I..GI..
   b5084:	490b 000b 490f 000b                         .I...I..

000b508c <_ZTV9USBSerial>:
	...
   b5094:	49b3 000b 4a1b 000b 49f1 000b 4805 000b     .I...J...I...H..
   b50a4:	49e3 000b 49b5 000b 49c5 000b 4a15 000b     .I...I...I...J..
   b50b4:	49d5 000b 49ad 000b                         .I...I..

000b50bc <_ZTVN5spark9WiFiClassE>:
	...
   b50c4:	4b13 000b 4b09 000b 4aff 000b 4ab5 000b     .K...K...J...J..
   b50d4:	4af3 000b 4ae7 000b 46e1 000b 46e9 000b     .J...J...F...F..
   b50e4:	4adb 000b 4ad3 000b 4ac9 000b 4abf 000b     .J...J...J...J..
   b50f4:	4719 000b                                   .G..

000b50f8 <_ZSt7nothrow>:
   b50f8:	5200 4545 544e 6d20 6c61 6f6c 2063 7573     .REENT malloc su
   b5108:	6363 6565 6564 0064 742f 706d 6a2f 6e65     cceeded./tmp/jen
   b5118:	696b 736e 472d 4343 312d 2d30 6970 6570     kins-GCC-10-pipe
   b5128:	696c 656e 342d 5f38 3032 3032 3131 3432     line-48_20201124
   b5138:	315f 3036 3136 3038 3336 2f39 7273 2f63     _1606180639/src/
   b5148:	656e 6c77 6269 6e2f 7765 696c 2f62 696c     newlib/newlib/li
   b5158:	6362 732f 6474 696c 2f62 6172 646e 632e     bc/stdlib/rand.c
	...

000b5169 <link_const_data_end>:
   b5169:	00          	.byte	0x00
	...

000b516c <link_constructors_location>:
   b516c:	000b40f5 	.word	0x000b40f5
   b5170:	000b4481 	.word	0x000b4481
   b5174:	000b44f9 	.word	0x000b44f9
   b5178:	000b4691 	.word	0x000b4691
   b517c:	000b47f1 	.word	0x000b47f1
   b5180:	000b48b1 	.word	0x000b48b1
   b5184:	000b48d1 	.word	0x000b48d1
   b5188:	000b48f5 	.word	0x000b48f5
   b518c:	000b4b1d 	.word	0x000b4b1d
